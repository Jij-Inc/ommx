syntax = "proto3";

package ommx.v1;

import "ommx/v1/function.proto";

// Equality of a constraint.
enum Equality {
  EQUALITY_UNSPECIFIED = 0;
  EQUALITY_EQUAL_TO_ZERO = 1;
  EQUALITY_LESS_THAN_OR_EQUAL_TO_ZERO = 2;
}

message Constraint {
  // Constraint ID
  //
  // - Constraint IDs are managed separately from decision variable IDs.
  //   We can use the same ID for both. For example, we have a decision variable `x` with decision variable ID `1``
  //   and constraint `x == 0` with constraint ID `1`.
  // - IDs are not required to be sequential.
  // - IDs must be unique with other types of constraints.
  uint64 id = 1;

  Equality equality = 2;

  Function function = 3;

  // Integer parameters of the constraint.
  //
  // Consider for example a problem constains a series of constraints `x[i, j] + y[i, j] <= 10` for `i = 1, 2, 3` and `j = 4, 5`,
  // then 6 = 3x2 `Constraint` messages should be created corresponding to each pair of `i` and `j`.
  // The `name` field of this message is intended to be a human-readable name of `x[i, j] + y[i, j] <= 10`,
  // and the `subscripts` field is intended to be the value of `[i, j]` like `[1, 5]`.
  //
  repeated int64 subscripts = 8;

  // Key-value parameters of the constraint.
  map<string, string> parameters = 5;

  // Name of the constraint.
  optional string name = 6;

  // Detail human-readable description of the constraint.
  optional string description = 7;

  // Temporal value for the Lagrangian dual variable of this constraint.
  //
  // This field is intended to use for storing the temporal dual variable value during the optimization process.
  // This will be different from the optimal dual variable value.
  //
  // This field is also allowed to use for modified dual variable like appearing augmented Lagrangian method,
  // which uses modified Lagrangian and thus the dual variable is also modified.
  //
  optional double dual_variable = 9;

  // Weight of the penalty term for the constraint.
  optional double penalty_weight = 10;
}

// A constraint evaluated with a state
message EvaluatedConstraint {
  uint64 id = 1;

  Equality equality = 2;

  // The value of function for the state
  double evaluated_value = 3;

  // IDs of decision variables used to evalute this constraint
  repeated uint64 used_decision_variable_ids = 4;

  // Integer parameters of the constraint.
  repeated int64 subscripts = 9;

  // Key-value parameters of the constraint.
  map<string, string> parameters = 5;

  // Name of the constraint.
  optional string name = 6;

  // Detail human-readable description of the constraint.
  optional string description = 7;

  // Value for the Lagrangian dual variable of this constraint.
  // This is optional because not all solvers support to evaluate dual variables.
  optional double dual_variable = 8;
}
