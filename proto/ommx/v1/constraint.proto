syntax = "proto3";

package ommx.v1;

import "ommx/v1/function.proto";

// Equality of a constraint.
enum Equality {
  EQUALITY_UNSPECIFIED = 0;
  EQUALITY_EQUAL_TO_ZERO = 1;
  EQUALITY_LESS_THAN_OR_EQUAL_TO_ZERO = 2;
}

message Constraint {
  // Constraint ID
  //
  // - Constraint IDs are managed separately from decision variable IDs.
  //   We can use the same ID for both. For example, we have a decision variable `x` with decision variable ID `1``
  //   and constraint `x == 0` with constraint ID `1`.
  // - IDs are not required to be sequential.
  // - IDs must be unique with other types of constraints.
  uint64 id = 1;

  Equality equality = 2;

  Function function = 3;

  // Parameters of the constraint.
  //
  // Consider for example a problem constains a series of constraints `x[i, j] + y[i, j] <= 10` for `i = 1, 2, 3` and `j = 4, 5`,
  // then 6 = 3x2 `Constraint` messages should be created corresponding to each pair of `i` and `j`.
  // The `name` field of this message is intended to be a human-readable name of `x[i, j] + y[i, j] <= 10`,
  // and the `parameters` field is intended to be the value of `i` and `j` like `{ "i" : "1", "j": "5" }`.
  //
  map<string, string> parameters = 5;

  // Name of the constraint.
  optional string name = 6;

  // Detail human-readable description of the constraint.
  optional string description = 7;
}

// A constraint evaluated with a state
message EvaluatedConstraint {
  uint64 id = 1;

  Equality equality = 2;

  // The value of function for the state
  double evaluated_value = 3;

  // IDs of decision variables used to evalute this constraint
  repeated uint64 used_decision_variable_ids = 4;

  // Parameters of the constraint.
  map<string, string> parameters = 5;

  // Name of the constraint.
  optional string name = 6;

  // Detail human-readable description of the constraint.
  optional string description = 7;
}
