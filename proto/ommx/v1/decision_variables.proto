syntax = "proto3";

package ommx.v1;

// Upper and lower bound of the decision variable.
message Bound {
  // Lower bound of the decision variable.
  double lower = 1;
  // Upper bound of the decision variable.
  double upper = 2;
}

// Decison variable which mathematical programming solver will optimize.
// It must have its kind, i.e. binary, integer, real or others and unique identifier of 64-bit integer.
// It may have its name and subscripts which are used to identify in modeling tools.
message DecisionVariable {
  // Decision variable ID.
  //
  // - IDs are not required to be sequential.
  uint64 id = 1;

  // Kind of the decision variable
  enum Kind {
    KIND_UNSPECIFIED = 0;
    KIND_BINARY = 1;
    KIND_INTEGER = 2;
    KIND_CONTINUOUS = 3;
    // Semi-integer decision variable is a decision variable that can take only integer values in the given range or zero.
    KIND_SEMI_INTEGER = 4;
    // Semi-continuous decision variable is a decision variable that can take only continuous values in the given range or zero.
    KIND_SEMI_CONTINUOUS = 5;
  }

  // Kind of the decision variable
  Kind kind = 2;

  // Bound of the decision variable
  // If the bound is not specified, the decision variable is considered as unbounded.
  optional Bound bound = 3;

  // Name of the decision variable. e.g. `x`
  optional string name = 4;

  // Subscripts of the decision variable. e.g. `[1, 3]` for an element of multidimensional deicion variable `x[1, 3]`
  repeated int64 subscripts = 5;

  // Additional parameters for decision variables
  map<string, string> parameters = 6;

  // Detail human-readable description of the decision variable.
  optional string description = 7;
}
