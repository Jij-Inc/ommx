syntax = "proto3";

package ommx.v1;

import "ommx/v1/constraint.proto";
import "ommx/v1/constraint_hints.proto";
import "ommx/v1/decision_variables.proto";
import "ommx/v1/function.proto";

// A set of parameters for instantiating an optimization problem from a parametric instance
message Parameters {
  map<uint64, double> entries = 1;
}

message Instance {
  message Description {
    optional string name = 1;
    optional string description = 2;
    repeated string authors = 3;
    // The application or library name that created this message.
    optional string created_by = 4;
  }
  Description description = 1;

  // Decision variables used in this instance
  //
  // - This must constain every decision variables used in the objective and constraints.
  // - This can contains a decision variable that is not used in the objective or constraints.
  repeated DecisionVariable decision_variables = 2;

  Function objective = 3;

  // Constraints of the optimization problem
  repeated Constraint constraints = 4;

  // Other types of constraints will be appended here
  //
  // TODO: Add semi-definite constraints to represent SDP
  // repeated SemiDefiniteConstraint semi_definite_constraints = ?;

  // The sense of this instance
  enum Sense {
    SENSE_UNSPECIFIED = 0;
    SENSE_MINIMIZE = 1;
    SENSE_MAXIMIZE = 2;
  }

  // The sense of this problem, i.e. minimize the objective or maximize it.
  //
  // Design decision note:
  // - This is a required field. Most mathematical modeling tools allow for an empty sense and default to minimization. Alternatively, some tools do not create such a field and represent maximization problems by negating the objective function. This project prefers explicit descriptions over implicit ones to avoid such ambiguity and to make it unnecessary for developers to look up the reference for the treatment of omitted cases.
  //
  Sense sense = 5;

  // Parameters used when instantiating this instance
  optional Parameters parameters = 6;

  // A list of constraint hints to be used by solver to gain performance. They are derived from one-or-more constraints in the instance and typically contains information of special types of constraints (e.g. one-hot, SOS, ...).
  ConstraintHints constraint_hints = 7;
}
