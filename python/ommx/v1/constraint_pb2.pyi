"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import ommx.v1.function_pb2
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class Constraint(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    class _Equality:
        ValueType = typing.NewType("ValueType", builtins.int)
        V: typing_extensions.TypeAlias = ValueType

    class _EqualityEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[Constraint._Equality.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        EQUALITY_UNSPECIFIED: Constraint._Equality.ValueType  # 0
        EQUALITY_EQUAL_TO_ZERO: Constraint._Equality.ValueType  # 1
        EQUALITY_LESS_THAN_OR_EQUAL_TO_ZERO: Constraint._Equality.ValueType  # 2

    class Equality(_Equality, metaclass=_EqualityEnumTypeWrapper): ...
    EQUALITY_UNSPECIFIED: Constraint.Equality.ValueType  # 0
    EQUALITY_EQUAL_TO_ZERO: Constraint.Equality.ValueType  # 1
    EQUALITY_LESS_THAN_OR_EQUAL_TO_ZERO: Constraint.Equality.ValueType  # 2

    @typing.final
    class Description(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        NAME_FIELD_NUMBER: builtins.int
        FORALL_FIELD_NUMBER: builtins.int
        name: builtins.str
        @property
        def forall(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]: ...
        def __init__(
            self,
            *,
            name: builtins.str = ...,
            forall: collections.abc.Iterable[builtins.int] | None = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing.Literal["forall", b"forall", "name", b"name"]) -> None: ...

    ID_FIELD_NUMBER: builtins.int
    EQUALITY_FIELD_NUMBER: builtins.int
    FUNCTION_FIELD_NUMBER: builtins.int
    DESCRIPTION_FIELD_NUMBER: builtins.int
    id: builtins.int
    """Constraint ID

    - Constraint IDs are managed separately from decision variable IDs.
      We can use the same ID for both. For example, we have a decision variable `x` with decision variable ID `1``
      and constraint `x == 0` with constraint ID `1`.
    - IDs are not required to be sequential.
    - IDs must be unique with other types of constraints.
    """
    equality: global___Constraint.Equality.ValueType
    @property
    def function(self) -> ommx.v1.function_pb2.Function: ...
    @property
    def description(self) -> global___Constraint.Description: ...
    def __init__(
        self,
        *,
        id: builtins.int = ...,
        equality: global___Constraint.Equality.ValueType = ...,
        function: ommx.v1.function_pb2.Function | None = ...,
        description: global___Constraint.Description | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["_description", b"_description", "description", b"description", "function", b"function"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["_description", b"_description", "description", b"description", "equality", b"equality", "function", b"function", "id", b"id"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["_description", b"_description"]) -> typing.Literal["description"] | None: ...

global___Constraint = Constraint
