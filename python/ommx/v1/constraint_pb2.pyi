"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import ommx.v1.function_pb2
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class _Equality:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _EqualityEnumTypeWrapper(
    google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_Equality.ValueType],
    builtins.type,
):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    EQUALITY_UNSPECIFIED: _Equality.ValueType  # 0
    EQUALITY_EQUAL_TO_ZERO: _Equality.ValueType  # 1
    EQUALITY_LESS_THAN_OR_EQUAL_TO_ZERO: _Equality.ValueType  # 2

class Equality(_Equality, metaclass=_EqualityEnumTypeWrapper):
    """Equality of a constraint."""

EQUALITY_UNSPECIFIED: Equality.ValueType  # 0
EQUALITY_EQUAL_TO_ZERO: Equality.ValueType  # 1
EQUALITY_LESS_THAN_OR_EQUAL_TO_ZERO: Equality.ValueType  # 2
global___Equality = Equality

@typing.final
class ConstraintDescription(google.protobuf.message.Message):
    """Additional infomations of the constraint for human-readable output

    Consider for example a problem constains a series of constraints `x[i, j] + y[i, j] <= 10` for `i = 1, 2, 3` and `j = 4, 5`,
    then 6 = 3x2 `Constraint` messages should be created corresponding to each pair of `i` and `j`.
    The `name` field of this message is intended to be a human-readable name of `x[i, j] + y[i, j] <= 10`,
    and the `parameters` field is intended to be the value of `i` and `j` like `{ "i" : "1", "j": "5" }`.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class ParametersEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        value: builtins.str
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: builtins.str = ...,
        ) -> None: ...
        def ClearField(
            self, field_name: typing.Literal["key", b"key", "value", b"value"]
        ) -> None: ...

    NAME_FIELD_NUMBER: builtins.int
    PARAMETERS_FIELD_NUMBER: builtins.int
    name: builtins.str
    """Name of the constraint"""
    @property
    def parameters(
        self,
    ) -> google.protobuf.internal.containers.ScalarMap[builtins.str, builtins.str]:
        """Parameters of the constraint."""

    def __init__(
        self,
        *,
        name: builtins.str = ...,
        parameters: collections.abc.Mapping[builtins.str, builtins.str] | None = ...,
    ) -> None: ...
    def ClearField(
        self, field_name: typing.Literal["name", b"name", "parameters", b"parameters"]
    ) -> None: ...

global___ConstraintDescription = ConstraintDescription

@typing.final
class Constraint(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ID_FIELD_NUMBER: builtins.int
    EQUALITY_FIELD_NUMBER: builtins.int
    FUNCTION_FIELD_NUMBER: builtins.int
    DESCRIPTION_FIELD_NUMBER: builtins.int
    id: builtins.int
    """Constraint ID

    - Constraint IDs are managed separately from decision variable IDs.
      We can use the same ID for both. For example, we have a decision variable `x` with decision variable ID `1``
      and constraint `x == 0` with constraint ID `1`.
    - IDs are not required to be sequential.
    - IDs must be unique with other types of constraints.
    """
    equality: global___Equality.ValueType
    @property
    def function(self) -> ommx.v1.function_pb2.Function: ...
    @property
    def description(self) -> global___ConstraintDescription: ...
    def __init__(
        self,
        *,
        id: builtins.int = ...,
        equality: global___Equality.ValueType = ...,
        function: ommx.v1.function_pb2.Function | None = ...,
        description: global___ConstraintDescription | None = ...,
    ) -> None: ...
    def HasField(
        self,
        field_name: typing.Literal[
            "_description",
            b"_description",
            "description",
            b"description",
            "function",
            b"function",
        ],
    ) -> builtins.bool: ...
    def ClearField(
        self,
        field_name: typing.Literal[
            "_description",
            b"_description",
            "description",
            b"description",
            "equality",
            b"equality",
            "function",
            b"function",
            "id",
            b"id",
        ],
    ) -> None: ...
    def WhichOneof(
        self, oneof_group: typing.Literal["_description", b"_description"]
    ) -> typing.Literal["description"] | None: ...

global___Constraint = Constraint

@typing.final
class EvaluatedConstraint(google.protobuf.message.Message):
    """A constraint evaluated with a state"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ID_FIELD_NUMBER: builtins.int
    EQUALITY_FIELD_NUMBER: builtins.int
    EVALUATED_VALUE_FIELD_NUMBER: builtins.int
    USED_DECISION_VARIABLE_IDS_FIELD_NUMBER: builtins.int
    DESCRIPTION_FIELD_NUMBER: builtins.int
    id: builtins.int
    equality: global___Equality.ValueType
    evaluated_value: builtins.float
    """The value of function for the state"""
    @property
    def used_decision_variable_ids(
        self,
    ) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]:
        """IDs of decision variables used to evalute this constraint"""

    @property
    def description(self) -> global___ConstraintDescription: ...
    def __init__(
        self,
        *,
        id: builtins.int = ...,
        equality: global___Equality.ValueType = ...,
        evaluated_value: builtins.float = ...,
        used_decision_variable_ids: collections.abc.Iterable[builtins.int] | None = ...,
        description: global___ConstraintDescription | None = ...,
    ) -> None: ...
    def HasField(
        self,
        field_name: typing.Literal[
            "_description", b"_description", "description", b"description"
        ],
    ) -> builtins.bool: ...
    def ClearField(
        self,
        field_name: typing.Literal[
            "_description",
            b"_description",
            "description",
            b"description",
            "equality",
            b"equality",
            "evaluated_value",
            b"evaluated_value",
            "id",
            b"id",
            "used_decision_variable_ids",
            b"used_decision_variable_ids",
        ],
    ) -> None: ...
    def WhichOneof(
        self, oneof_group: typing.Literal["_description", b"_description"]
    ) -> typing.Literal["description"] | None: ...

global___EvaluatedConstraint = EvaluatedConstraint
