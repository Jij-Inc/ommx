// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: ommx/v1/linear.proto
// Protobuf C++ Version: 5.27.3

#ifndef GOOGLE_PROTOBUF_INCLUDED_ommx_2fv1_2flinear_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_ommx_2fv1_2flinear_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5027003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_ommx_2fv1_2flinear_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_ommx_2fv1_2flinear_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_ommx_2fv1_2flinear_2eproto;
namespace ommx {
namespace v1 {
class Linear;
struct LinearDefaultTypeInternal;
extern LinearDefaultTypeInternal _Linear_default_instance_;
class Linear_Term;
struct Linear_TermDefaultTypeInternal;
extern Linear_TermDefaultTypeInternal _Linear_Term_default_instance_;
}  // namespace v1
}  // namespace ommx
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace ommx {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class Linear_Term final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ommx.v1.Linear.Term) */ {
 public:
  inline Linear_Term() : Linear_Term(nullptr) {}
  ~Linear_Term() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Linear_Term(
      ::google::protobuf::internal::ConstantInitialized);

  inline Linear_Term(const Linear_Term& from) : Linear_Term(nullptr, from) {}
  inline Linear_Term(Linear_Term&& from) noexcept
      : Linear_Term(nullptr, std::move(from)) {}
  inline Linear_Term& operator=(const Linear_Term& from) {
    CopyFrom(from);
    return *this;
  }
  inline Linear_Term& operator=(Linear_Term&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Linear_Term& default_instance() {
    return *internal_default_instance();
  }
  static inline const Linear_Term* internal_default_instance() {
    return reinterpret_cast<const Linear_Term*>(
        &_Linear_Term_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Linear_Term& a, Linear_Term& b) { a.Swap(&b); }
  inline void Swap(Linear_Term* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Linear_Term* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Linear_Term* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Linear_Term>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Linear_Term& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Linear_Term& from) { Linear_Term::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Linear_Term* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "ommx.v1.Linear.Term"; }

 protected:
  explicit Linear_Term(::google::protobuf::Arena* arena);
  Linear_Term(::google::protobuf::Arena* arena, const Linear_Term& from);
  Linear_Term(::google::protobuf::Arena* arena, Linear_Term&& from) noexcept
      : Linear_Term(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kIdFieldNumber = 1,
    kCoefficientFieldNumber = 2,
  };
  // uint64 id = 1;
  void clear_id() ;
  ::uint64_t id() const;
  void set_id(::uint64_t value);

  private:
  ::uint64_t _internal_id() const;
  void _internal_set_id(::uint64_t value);

  public:
  // double coefficient = 2;
  void clear_coefficient() ;
  double coefficient() const;
  void set_coefficient(double value);

  private:
  double _internal_coefficient() const;
  void _internal_set_coefficient(double value);

  public:
  // @@protoc_insertion_point(class_scope:ommx.v1.Linear.Term)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Linear_Term_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Linear_Term& from_msg);
    ::uint64_t id_;
    double coefficient_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ommx_2fv1_2flinear_2eproto;
};
// -------------------------------------------------------------------

class Linear final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ommx.v1.Linear) */ {
 public:
  inline Linear() : Linear(nullptr) {}
  ~Linear() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Linear(
      ::google::protobuf::internal::ConstantInitialized);

  inline Linear(const Linear& from) : Linear(nullptr, from) {}
  inline Linear(Linear&& from) noexcept
      : Linear(nullptr, std::move(from)) {}
  inline Linear& operator=(const Linear& from) {
    CopyFrom(from);
    return *this;
  }
  inline Linear& operator=(Linear&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Linear& default_instance() {
    return *internal_default_instance();
  }
  static inline const Linear* internal_default_instance() {
    return reinterpret_cast<const Linear*>(
        &_Linear_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(Linear& a, Linear& b) { a.Swap(&b); }
  inline void Swap(Linear* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Linear* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Linear* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Linear>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Linear& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Linear& from) { Linear::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Linear* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "ommx.v1.Linear"; }

 protected:
  explicit Linear(::google::protobuf::Arena* arena);
  Linear(::google::protobuf::Arena* arena, const Linear& from);
  Linear(::google::protobuf::Arena* arena, Linear&& from) noexcept
      : Linear(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using Term = Linear_Term;

  // accessors -------------------------------------------------------
  enum : int {
    kTermsFieldNumber = 1,
    kConstantFieldNumber = 2,
  };
  // repeated .ommx.v1.Linear.Term terms = 1;
  int terms_size() const;
  private:
  int _internal_terms_size() const;

  public:
  void clear_terms() ;
  ::ommx::v1::Linear_Term* mutable_terms(int index);
  ::google::protobuf::RepeatedPtrField<::ommx::v1::Linear_Term>* mutable_terms();

  private:
  const ::google::protobuf::RepeatedPtrField<::ommx::v1::Linear_Term>& _internal_terms() const;
  ::google::protobuf::RepeatedPtrField<::ommx::v1::Linear_Term>* _internal_mutable_terms();
  public:
  const ::ommx::v1::Linear_Term& terms(int index) const;
  ::ommx::v1::Linear_Term* add_terms();
  const ::google::protobuf::RepeatedPtrField<::ommx::v1::Linear_Term>& terms() const;
  // double constant = 2;
  void clear_constant() ;
  double constant() const;
  void set_constant(double value);

  private:
  double _internal_constant() const;
  void _internal_set_constant(double value);

  public:
  // @@protoc_insertion_point(class_scope:ommx.v1.Linear)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Linear_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Linear& from_msg);
    ::google::protobuf::RepeatedPtrField< ::ommx::v1::Linear_Term > terms_;
    double constant_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ommx_2fv1_2flinear_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Linear_Term

// uint64 id = 1;
inline void Linear_Term::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = ::uint64_t{0u};
}
inline ::uint64_t Linear_Term::id() const {
  // @@protoc_insertion_point(field_get:ommx.v1.Linear.Term.id)
  return _internal_id();
}
inline void Linear_Term::set_id(::uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:ommx.v1.Linear.Term.id)
}
inline ::uint64_t Linear_Term::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_;
}
inline void Linear_Term::_internal_set_id(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = value;
}

// double coefficient = 2;
inline void Linear_Term::clear_coefficient() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.coefficient_ = 0;
}
inline double Linear_Term::coefficient() const {
  // @@protoc_insertion_point(field_get:ommx.v1.Linear.Term.coefficient)
  return _internal_coefficient();
}
inline void Linear_Term::set_coefficient(double value) {
  _internal_set_coefficient(value);
  // @@protoc_insertion_point(field_set:ommx.v1.Linear.Term.coefficient)
}
inline double Linear_Term::_internal_coefficient() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.coefficient_;
}
inline void Linear_Term::_internal_set_coefficient(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.coefficient_ = value;
}

// -------------------------------------------------------------------

// Linear

// repeated .ommx.v1.Linear.Term terms = 1;
inline int Linear::_internal_terms_size() const {
  return _internal_terms().size();
}
inline int Linear::terms_size() const {
  return _internal_terms_size();
}
inline void Linear::clear_terms() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.terms_.Clear();
}
inline ::ommx::v1::Linear_Term* Linear::mutable_terms(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:ommx.v1.Linear.terms)
  return _internal_mutable_terms()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::ommx::v1::Linear_Term>* Linear::mutable_terms()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:ommx.v1.Linear.terms)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_terms();
}
inline const ::ommx::v1::Linear_Term& Linear::terms(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ommx.v1.Linear.terms)
  return _internal_terms().Get(index);
}
inline ::ommx::v1::Linear_Term* Linear::add_terms() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::ommx::v1::Linear_Term* _add = _internal_mutable_terms()->Add();
  // @@protoc_insertion_point(field_add:ommx.v1.Linear.terms)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::ommx::v1::Linear_Term>& Linear::terms() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:ommx.v1.Linear.terms)
  return _internal_terms();
}
inline const ::google::protobuf::RepeatedPtrField<::ommx::v1::Linear_Term>&
Linear::_internal_terms() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.terms_;
}
inline ::google::protobuf::RepeatedPtrField<::ommx::v1::Linear_Term>*
Linear::_internal_mutable_terms() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.terms_;
}

// double constant = 2;
inline void Linear::clear_constant() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.constant_ = 0;
}
inline double Linear::constant() const {
  // @@protoc_insertion_point(field_get:ommx.v1.Linear.constant)
  return _internal_constant();
}
inline void Linear::set_constant(double value) {
  _internal_set_constant(value);
  // @@protoc_insertion_point(field_set:ommx.v1.Linear.constant)
}
inline double Linear::_internal_constant() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.constant_;
}
inline void Linear::_internal_set_constant(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.constant_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace ommx


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_ommx_2fv1_2flinear_2eproto_2epb_2eh
