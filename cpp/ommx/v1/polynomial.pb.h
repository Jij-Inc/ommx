// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: ommx/v1/polynomial.proto
// Protobuf C++ Version: 5.27.3

#ifndef GOOGLE_PROTOBUF_INCLUDED_ommx_2fv1_2fpolynomial_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_ommx_2fv1_2fpolynomial_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5027003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_ommx_2fv1_2fpolynomial_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_ommx_2fv1_2fpolynomial_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_ommx_2fv1_2fpolynomial_2eproto;
namespace ommx {
namespace v1 {
class Monomial;
struct MonomialDefaultTypeInternal;
extern MonomialDefaultTypeInternal _Monomial_default_instance_;
class Polynomial;
struct PolynomialDefaultTypeInternal;
extern PolynomialDefaultTypeInternal _Polynomial_default_instance_;
}  // namespace v1
}  // namespace ommx
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace ommx {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class Monomial final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ommx.v1.Monomial) */ {
 public:
  inline Monomial() : Monomial(nullptr) {}
  ~Monomial() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Monomial(
      ::google::protobuf::internal::ConstantInitialized);

  inline Monomial(const Monomial& from) : Monomial(nullptr, from) {}
  inline Monomial(Monomial&& from) noexcept
      : Monomial(nullptr, std::move(from)) {}
  inline Monomial& operator=(const Monomial& from) {
    CopyFrom(from);
    return *this;
  }
  inline Monomial& operator=(Monomial&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Monomial& default_instance() {
    return *internal_default_instance();
  }
  static inline const Monomial* internal_default_instance() {
    return reinterpret_cast<const Monomial*>(
        &_Monomial_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Monomial& a, Monomial& b) { a.Swap(&b); }
  inline void Swap(Monomial* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Monomial* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Monomial* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Monomial>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Monomial& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Monomial& from) { Monomial::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Monomial* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "ommx.v1.Monomial"; }

 protected:
  explicit Monomial(::google::protobuf::Arena* arena);
  Monomial(::google::protobuf::Arena* arena, const Monomial& from);
  Monomial(::google::protobuf::Arena* arena, Monomial&& from) noexcept
      : Monomial(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kIdsFieldNumber = 1,
    kCoefficientFieldNumber = 2,
  };
  // repeated uint64 ids = 1 [json_name = "ids"];
  int ids_size() const;
  private:
  int _internal_ids_size() const;

  public:
  void clear_ids() ;
  ::uint64_t ids(int index) const;
  void set_ids(int index, ::uint64_t value);
  void add_ids(::uint64_t value);
  const ::google::protobuf::RepeatedField<::uint64_t>& ids() const;
  ::google::protobuf::RepeatedField<::uint64_t>* mutable_ids();

  private:
  const ::google::protobuf::RepeatedField<::uint64_t>& _internal_ids() const;
  ::google::protobuf::RepeatedField<::uint64_t>* _internal_mutable_ids();

  public:
  // double coefficient = 2 [json_name = "coefficient"];
  void clear_coefficient() ;
  double coefficient() const;
  void set_coefficient(double value);

  private:
  double _internal_coefficient() const;
  void _internal_set_coefficient(double value);

  public:
  // @@protoc_insertion_point(class_scope:ommx.v1.Monomial)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Monomial_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Monomial& from_msg);
    ::google::protobuf::RepeatedField<::uint64_t> ids_;
    mutable ::google::protobuf::internal::CachedSize _ids_cached_byte_size_;
    double coefficient_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ommx_2fv1_2fpolynomial_2eproto;
};
// -------------------------------------------------------------------

class Polynomial final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ommx.v1.Polynomial) */ {
 public:
  inline Polynomial() : Polynomial(nullptr) {}
  ~Polynomial() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Polynomial(
      ::google::protobuf::internal::ConstantInitialized);

  inline Polynomial(const Polynomial& from) : Polynomial(nullptr, from) {}
  inline Polynomial(Polynomial&& from) noexcept
      : Polynomial(nullptr, std::move(from)) {}
  inline Polynomial& operator=(const Polynomial& from) {
    CopyFrom(from);
    return *this;
  }
  inline Polynomial& operator=(Polynomial&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Polynomial& default_instance() {
    return *internal_default_instance();
  }
  static inline const Polynomial* internal_default_instance() {
    return reinterpret_cast<const Polynomial*>(
        &_Polynomial_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(Polynomial& a, Polynomial& b) { a.Swap(&b); }
  inline void Swap(Polynomial* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Polynomial* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Polynomial* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Polynomial>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Polynomial& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Polynomial& from) { Polynomial::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Polynomial* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "ommx.v1.Polynomial"; }

 protected:
  explicit Polynomial(::google::protobuf::Arena* arena);
  Polynomial(::google::protobuf::Arena* arena, const Polynomial& from);
  Polynomial(::google::protobuf::Arena* arena, Polynomial&& from) noexcept
      : Polynomial(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTermsFieldNumber = 1,
  };
  // repeated .ommx.v1.Monomial terms = 1 [json_name = "terms"];
  int terms_size() const;
  private:
  int _internal_terms_size() const;

  public:
  void clear_terms() ;
  ::ommx::v1::Monomial* mutable_terms(int index);
  ::google::protobuf::RepeatedPtrField<::ommx::v1::Monomial>* mutable_terms();

  private:
  const ::google::protobuf::RepeatedPtrField<::ommx::v1::Monomial>& _internal_terms() const;
  ::google::protobuf::RepeatedPtrField<::ommx::v1::Monomial>* _internal_mutable_terms();
  public:
  const ::ommx::v1::Monomial& terms(int index) const;
  ::ommx::v1::Monomial* add_terms();
  const ::google::protobuf::RepeatedPtrField<::ommx::v1::Monomial>& terms() const;
  // @@protoc_insertion_point(class_scope:ommx.v1.Polynomial)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Polynomial_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Polynomial& from_msg);
    ::google::protobuf::RepeatedPtrField< ::ommx::v1::Monomial > terms_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ommx_2fv1_2fpolynomial_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Monomial

// repeated uint64 ids = 1 [json_name = "ids"];
inline int Monomial::_internal_ids_size() const {
  return _internal_ids().size();
}
inline int Monomial::ids_size() const {
  return _internal_ids_size();
}
inline void Monomial::clear_ids() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ids_.Clear();
}
inline ::uint64_t Monomial::ids(int index) const {
  // @@protoc_insertion_point(field_get:ommx.v1.Monomial.ids)
  return _internal_ids().Get(index);
}
inline void Monomial::set_ids(int index, ::uint64_t value) {
  _internal_mutable_ids()->Set(index, value);
  // @@protoc_insertion_point(field_set:ommx.v1.Monomial.ids)
}
inline void Monomial::add_ids(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_ids()->Add(value);
  // @@protoc_insertion_point(field_add:ommx.v1.Monomial.ids)
}
inline const ::google::protobuf::RepeatedField<::uint64_t>& Monomial::ids() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:ommx.v1.Monomial.ids)
  return _internal_ids();
}
inline ::google::protobuf::RepeatedField<::uint64_t>* Monomial::mutable_ids()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:ommx.v1.Monomial.ids)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_ids();
}
inline const ::google::protobuf::RepeatedField<::uint64_t>&
Monomial::_internal_ids() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ids_;
}
inline ::google::protobuf::RepeatedField<::uint64_t>* Monomial::_internal_mutable_ids() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.ids_;
}

// double coefficient = 2 [json_name = "coefficient"];
inline void Monomial::clear_coefficient() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.coefficient_ = 0;
}
inline double Monomial::coefficient() const {
  // @@protoc_insertion_point(field_get:ommx.v1.Monomial.coefficient)
  return _internal_coefficient();
}
inline void Monomial::set_coefficient(double value) {
  _internal_set_coefficient(value);
  // @@protoc_insertion_point(field_set:ommx.v1.Monomial.coefficient)
}
inline double Monomial::_internal_coefficient() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.coefficient_;
}
inline void Monomial::_internal_set_coefficient(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.coefficient_ = value;
}

// -------------------------------------------------------------------

// Polynomial

// repeated .ommx.v1.Monomial terms = 1 [json_name = "terms"];
inline int Polynomial::_internal_terms_size() const {
  return _internal_terms().size();
}
inline int Polynomial::terms_size() const {
  return _internal_terms_size();
}
inline void Polynomial::clear_terms() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.terms_.Clear();
}
inline ::ommx::v1::Monomial* Polynomial::mutable_terms(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:ommx.v1.Polynomial.terms)
  return _internal_mutable_terms()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::ommx::v1::Monomial>* Polynomial::mutable_terms()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:ommx.v1.Polynomial.terms)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_terms();
}
inline const ::ommx::v1::Monomial& Polynomial::terms(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ommx.v1.Polynomial.terms)
  return _internal_terms().Get(index);
}
inline ::ommx::v1::Monomial* Polynomial::add_terms() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::ommx::v1::Monomial* _add = _internal_mutable_terms()->Add();
  // @@protoc_insertion_point(field_add:ommx.v1.Polynomial.terms)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::ommx::v1::Monomial>& Polynomial::terms() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:ommx.v1.Polynomial.terms)
  return _internal_terms();
}
inline const ::google::protobuf::RepeatedPtrField<::ommx::v1::Monomial>&
Polynomial::_internal_terms() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.terms_;
}
inline ::google::protobuf::RepeatedPtrField<::ommx::v1::Monomial>*
Polynomial::_internal_mutable_terms() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.terms_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace ommx


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_ommx_2fv1_2fpolynomial_2eproto_2epb_2eh
