// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: ommx/v1/solution.proto
// Protobuf C++ Version: 5.27.3

#ifndef GOOGLE_PROTOBUF_INCLUDED_ommx_2fv1_2fsolution_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_ommx_2fv1_2fsolution_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5027003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "ommx/v1/constraint.pb.h"
#include "ommx/v1/decision_variables.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_ommx_2fv1_2fsolution_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_ommx_2fv1_2fsolution_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_ommx_2fv1_2fsolution_2eproto;
namespace ommx {
namespace v1 {
class Infeasible;
struct InfeasibleDefaultTypeInternal;
extern InfeasibleDefaultTypeInternal _Infeasible_default_instance_;
class Result;
struct ResultDefaultTypeInternal;
extern ResultDefaultTypeInternal _Result_default_instance_;
class Solution;
struct SolutionDefaultTypeInternal;
extern SolutionDefaultTypeInternal _Solution_default_instance_;
class State;
struct StateDefaultTypeInternal;
extern StateDefaultTypeInternal _State_default_instance_;
class State_EntriesEntry_DoNotUse;
struct State_EntriesEntry_DoNotUseDefaultTypeInternal;
extern State_EntriesEntry_DoNotUseDefaultTypeInternal _State_EntriesEntry_DoNotUse_default_instance_;
class Unbounded;
struct UnboundedDefaultTypeInternal;
extern UnboundedDefaultTypeInternal _Unbounded_default_instance_;
}  // namespace v1
}  // namespace ommx
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace ommx {
namespace v1 {
enum Optimality : int {
  OPTIMALITY_UNSPECIFIED = 0,
  OPTIMALITY_OPTIMAL = 1,
  OPTIMALITY_NOT_OPTIMAL = 2,
  Optimality_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Optimality_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Optimality_IsValid(int value);
extern const uint32_t Optimality_internal_data_[];
constexpr Optimality Optimality_MIN = static_cast<Optimality>(0);
constexpr Optimality Optimality_MAX = static_cast<Optimality>(2);
constexpr int Optimality_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
Optimality_descriptor();
template <typename T>
const std::string& Optimality_Name(T value) {
  static_assert(std::is_same<T, Optimality>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Optimality_Name().");
  return Optimality_Name(static_cast<Optimality>(value));
}
template <>
inline const std::string& Optimality_Name(Optimality value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Optimality_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool Optimality_Parse(absl::string_view name, Optimality* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Optimality>(
      Optimality_descriptor(), name, value);
}
enum Relaxation : int {
  RELAXATION_UNSPECIFIED = 0,
  RELAXATION_LP_RELAXED = 1,
  Relaxation_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Relaxation_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Relaxation_IsValid(int value);
extern const uint32_t Relaxation_internal_data_[];
constexpr Relaxation Relaxation_MIN = static_cast<Relaxation>(0);
constexpr Relaxation Relaxation_MAX = static_cast<Relaxation>(1);
constexpr int Relaxation_ARRAYSIZE = 1 + 1;
const ::google::protobuf::EnumDescriptor*
Relaxation_descriptor();
template <typename T>
const std::string& Relaxation_Name(T value) {
  static_assert(std::is_same<T, Relaxation>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Relaxation_Name().");
  return Relaxation_Name(static_cast<Relaxation>(value));
}
template <>
inline const std::string& Relaxation_Name(Relaxation value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Relaxation_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool Relaxation_Parse(absl::string_view name, Relaxation* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Relaxation>(
      Relaxation_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class Unbounded final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:ommx.v1.Unbounded) */ {
 public:
  inline Unbounded() : Unbounded(nullptr) {}
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Unbounded(
      ::google::protobuf::internal::ConstantInitialized);

  inline Unbounded(const Unbounded& from) : Unbounded(nullptr, from) {}
  inline Unbounded(Unbounded&& from) noexcept
      : Unbounded(nullptr, std::move(from)) {}
  inline Unbounded& operator=(const Unbounded& from) {
    CopyFrom(from);
    return *this;
  }
  inline Unbounded& operator=(Unbounded&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Unbounded& default_instance() {
    return *internal_default_instance();
  }
  static inline const Unbounded* internal_default_instance() {
    return reinterpret_cast<const Unbounded*>(
        &_Unbounded_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(Unbounded& a, Unbounded& b) { a.Swap(&b); }
  inline void Swap(Unbounded* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Unbounded* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Unbounded* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<Unbounded>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Unbounded& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Unbounded& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "ommx.v1.Unbounded"; }

 protected:
  explicit Unbounded(::google::protobuf::Arena* arena);
  Unbounded(::google::protobuf::Arena* arena, const Unbounded& from);
  Unbounded(::google::protobuf::Arena* arena, Unbounded&& from) noexcept
      : Unbounded(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ZeroFieldsBase::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:ommx.v1.Unbounded)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Unbounded_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Unbounded& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_ommx_2fv1_2fsolution_2eproto;
};
// -------------------------------------------------------------------

class State_EntriesEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          State_EntriesEntry_DoNotUse, ::uint64_t, double,
          ::google::protobuf::internal::WireFormatLite::TYPE_UINT64,
          ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      State_EntriesEntry_DoNotUse, ::uint64_t, double,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT64,
      ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>;
  State_EntriesEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR State_EntriesEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit State_EntriesEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const State_EntriesEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const State_EntriesEntry_DoNotUse*>(
        &_State_EntriesEntry_DoNotUse_default_instance_);
  }
const ::google::protobuf::Message::ClassData* GetClassData() const final;
  friend struct ::TableStruct_ommx_2fv1_2fsolution_2eproto;
};
// -------------------------------------------------------------------

class Infeasible final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:ommx.v1.Infeasible) */ {
 public:
  inline Infeasible() : Infeasible(nullptr) {}
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Infeasible(
      ::google::protobuf::internal::ConstantInitialized);

  inline Infeasible(const Infeasible& from) : Infeasible(nullptr, from) {}
  inline Infeasible(Infeasible&& from) noexcept
      : Infeasible(nullptr, std::move(from)) {}
  inline Infeasible& operator=(const Infeasible& from) {
    CopyFrom(from);
    return *this;
  }
  inline Infeasible& operator=(Infeasible&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Infeasible& default_instance() {
    return *internal_default_instance();
  }
  static inline const Infeasible* internal_default_instance() {
    return reinterpret_cast<const Infeasible*>(
        &_Infeasible_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(Infeasible& a, Infeasible& b) { a.Swap(&b); }
  inline void Swap(Infeasible* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Infeasible* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Infeasible* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<Infeasible>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Infeasible& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Infeasible& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "ommx.v1.Infeasible"; }

 protected:
  explicit Infeasible(::google::protobuf::Arena* arena);
  Infeasible(::google::protobuf::Arena* arena, const Infeasible& from);
  Infeasible(::google::protobuf::Arena* arena, Infeasible&& from) noexcept
      : Infeasible(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ZeroFieldsBase::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:ommx.v1.Infeasible)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Infeasible_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Infeasible& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_ommx_2fv1_2fsolution_2eproto;
};
// -------------------------------------------------------------------

class State final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ommx.v1.State) */ {
 public:
  inline State() : State(nullptr) {}
  ~State() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR State(
      ::google::protobuf::internal::ConstantInitialized);

  inline State(const State& from) : State(nullptr, from) {}
  inline State(State&& from) noexcept
      : State(nullptr, std::move(from)) {}
  inline State& operator=(const State& from) {
    CopyFrom(from);
    return *this;
  }
  inline State& operator=(State&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const State& default_instance() {
    return *internal_default_instance();
  }
  static inline const State* internal_default_instance() {
    return reinterpret_cast<const State*>(
        &_State_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(State& a, State& b) { a.Swap(&b); }
  inline void Swap(State* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(State* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  State* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<State>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const State& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const State& from) { State::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(State* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "ommx.v1.State"; }

 protected:
  explicit State(::google::protobuf::Arena* arena);
  State(::google::protobuf::Arena* arena, const State& from);
  State(::google::protobuf::Arena* arena, State&& from) noexcept
      : State(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kEntriesFieldNumber = 1,
  };
  // map<uint64, double> entries = 1 [json_name = "entries"];
  int entries_size() const;
  private:
  int _internal_entries_size() const;

  public:
  void clear_entries() ;
  const ::google::protobuf::Map<::uint64_t, double>& entries() const;
  ::google::protobuf::Map<::uint64_t, double>* mutable_entries();

  private:
  const ::google::protobuf::Map<::uint64_t, double>& _internal_entries() const;
  ::google::protobuf::Map<::uint64_t, double>* _internal_mutable_entries();

  public:
  // @@protoc_insertion_point(class_scope:ommx.v1.State)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_State_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const State& from_msg);
    ::google::protobuf::internal::MapField<State_EntriesEntry_DoNotUse, ::uint64_t, double,
                      ::google::protobuf::internal::WireFormatLite::TYPE_UINT64,
                      ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>
        entries_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ommx_2fv1_2fsolution_2eproto;
};
// -------------------------------------------------------------------

class Solution final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ommx.v1.Solution) */ {
 public:
  inline Solution() : Solution(nullptr) {}
  ~Solution() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Solution(
      ::google::protobuf::internal::ConstantInitialized);

  inline Solution(const Solution& from) : Solution(nullptr, from) {}
  inline Solution(Solution&& from) noexcept
      : Solution(nullptr, std::move(from)) {}
  inline Solution& operator=(const Solution& from) {
    CopyFrom(from);
    return *this;
  }
  inline Solution& operator=(Solution&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Solution& default_instance() {
    return *internal_default_instance();
  }
  static inline const Solution* internal_default_instance() {
    return reinterpret_cast<const Solution*>(
        &_Solution_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(Solution& a, Solution& b) { a.Swap(&b); }
  inline void Swap(Solution* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Solution* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Solution* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Solution>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Solution& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Solution& from) { Solution::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Solution* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "ommx.v1.Solution"; }

 protected:
  explicit Solution(::google::protobuf::Arena* arena);
  Solution(::google::protobuf::Arena* arena, const Solution& from);
  Solution(::google::protobuf::Arena* arena, Solution&& from) noexcept
      : Solution(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDecisionVariablesFieldNumber = 3,
    kEvaluatedConstraintsFieldNumber = 4,
    kStateFieldNumber = 1,
    kObjectiveFieldNumber = 2,
    kFeasibleFieldNumber = 5,
    kOptimalityFieldNumber = 6,
    kRelaxationFieldNumber = 7,
  };
  // repeated .ommx.v1.DecisionVariable decision_variables = 3 [json_name = "decisionVariables"];
  int decision_variables_size() const;
  private:
  int _internal_decision_variables_size() const;

  public:
  void clear_decision_variables() ;
  ::ommx::v1::DecisionVariable* mutable_decision_variables(int index);
  ::google::protobuf::RepeatedPtrField<::ommx::v1::DecisionVariable>* mutable_decision_variables();

  private:
  const ::google::protobuf::RepeatedPtrField<::ommx::v1::DecisionVariable>& _internal_decision_variables() const;
  ::google::protobuf::RepeatedPtrField<::ommx::v1::DecisionVariable>* _internal_mutable_decision_variables();
  public:
  const ::ommx::v1::DecisionVariable& decision_variables(int index) const;
  ::ommx::v1::DecisionVariable* add_decision_variables();
  const ::google::protobuf::RepeatedPtrField<::ommx::v1::DecisionVariable>& decision_variables() const;
  // repeated .ommx.v1.EvaluatedConstraint evaluated_constraints = 4 [json_name = "evaluatedConstraints"];
  int evaluated_constraints_size() const;
  private:
  int _internal_evaluated_constraints_size() const;

  public:
  void clear_evaluated_constraints() ;
  ::ommx::v1::EvaluatedConstraint* mutable_evaluated_constraints(int index);
  ::google::protobuf::RepeatedPtrField<::ommx::v1::EvaluatedConstraint>* mutable_evaluated_constraints();

  private:
  const ::google::protobuf::RepeatedPtrField<::ommx::v1::EvaluatedConstraint>& _internal_evaluated_constraints() const;
  ::google::protobuf::RepeatedPtrField<::ommx::v1::EvaluatedConstraint>* _internal_mutable_evaluated_constraints();
  public:
  const ::ommx::v1::EvaluatedConstraint& evaluated_constraints(int index) const;
  ::ommx::v1::EvaluatedConstraint* add_evaluated_constraints();
  const ::google::protobuf::RepeatedPtrField<::ommx::v1::EvaluatedConstraint>& evaluated_constraints() const;
  // .ommx.v1.State state = 1 [json_name = "state"];
  bool has_state() const;
  void clear_state() ;
  const ::ommx::v1::State& state() const;
  PROTOBUF_NODISCARD ::ommx::v1::State* release_state();
  ::ommx::v1::State* mutable_state();
  void set_allocated_state(::ommx::v1::State* value);
  void unsafe_arena_set_allocated_state(::ommx::v1::State* value);
  ::ommx::v1::State* unsafe_arena_release_state();

  private:
  const ::ommx::v1::State& _internal_state() const;
  ::ommx::v1::State* _internal_mutable_state();

  public:
  // double objective = 2 [json_name = "objective"];
  void clear_objective() ;
  double objective() const;
  void set_objective(double value);

  private:
  double _internal_objective() const;
  void _internal_set_objective(double value);

  public:
  // bool feasible = 5 [json_name = "feasible"];
  void clear_feasible() ;
  bool feasible() const;
  void set_feasible(bool value);

  private:
  bool _internal_feasible() const;
  void _internal_set_feasible(bool value);

  public:
  // .ommx.v1.Optimality optimality = 6 [json_name = "optimality"];
  void clear_optimality() ;
  ::ommx::v1::Optimality optimality() const;
  void set_optimality(::ommx::v1::Optimality value);

  private:
  ::ommx::v1::Optimality _internal_optimality() const;
  void _internal_set_optimality(::ommx::v1::Optimality value);

  public:
  // .ommx.v1.Relaxation relaxation = 7 [json_name = "relaxation"];
  void clear_relaxation() ;
  ::ommx::v1::Relaxation relaxation() const;
  void set_relaxation(::ommx::v1::Relaxation value);

  private:
  ::ommx::v1::Relaxation _internal_relaxation() const;
  void _internal_set_relaxation(::ommx::v1::Relaxation value);

  public:
  // @@protoc_insertion_point(class_scope:ommx.v1.Solution)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 3,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Solution_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Solution& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::ommx::v1::DecisionVariable > decision_variables_;
    ::google::protobuf::RepeatedPtrField< ::ommx::v1::EvaluatedConstraint > evaluated_constraints_;
    ::ommx::v1::State* state_;
    double objective_;
    bool feasible_;
    int optimality_;
    int relaxation_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ommx_2fv1_2fsolution_2eproto;
};
// -------------------------------------------------------------------

class Result final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ommx.v1.Result) */ {
 public:
  inline Result() : Result(nullptr) {}
  ~Result() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Result(
      ::google::protobuf::internal::ConstantInitialized);

  inline Result(const Result& from) : Result(nullptr, from) {}
  inline Result(Result&& from) noexcept
      : Result(nullptr, std::move(from)) {}
  inline Result& operator=(const Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline Result& operator=(Result&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Result& default_instance() {
    return *internal_default_instance();
  }
  enum ResultCase {
    kError = 1,
    kSolution = 2,
    kInfeasible = 3,
    kUnbounded = 4,
    RESULT_NOT_SET = 0,
  };
  static inline const Result* internal_default_instance() {
    return reinterpret_cast<const Result*>(
        &_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(Result& a, Result& b) { a.Swap(&b); }
  inline void Swap(Result* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Result* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Result* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Result>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Result& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Result& from) { Result::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Result* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "ommx.v1.Result"; }

 protected:
  explicit Result(::google::protobuf::Arena* arena);
  Result(::google::protobuf::Arena* arena, const Result& from);
  Result(::google::protobuf::Arena* arena, Result&& from) noexcept
      : Result(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kErrorFieldNumber = 1,
    kSolutionFieldNumber = 2,
    kInfeasibleFieldNumber = 3,
    kUnboundedFieldNumber = 4,
  };
  // string error = 1 [json_name = "error"];
  bool has_error() const;
  void clear_error() ;
  const std::string& error() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_error(Arg_&& arg, Args_... args);
  std::string* mutable_error();
  PROTOBUF_NODISCARD std::string* release_error();
  void set_allocated_error(std::string* value);

  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(
      const std::string& value);
  std::string* _internal_mutable_error();

  public:
  // .ommx.v1.Solution solution = 2 [json_name = "solution"];
  bool has_solution() const;
  private:
  bool _internal_has_solution() const;

  public:
  void clear_solution() ;
  const ::ommx::v1::Solution& solution() const;
  PROTOBUF_NODISCARD ::ommx::v1::Solution* release_solution();
  ::ommx::v1::Solution* mutable_solution();
  void set_allocated_solution(::ommx::v1::Solution* value);
  void unsafe_arena_set_allocated_solution(::ommx::v1::Solution* value);
  ::ommx::v1::Solution* unsafe_arena_release_solution();

  private:
  const ::ommx::v1::Solution& _internal_solution() const;
  ::ommx::v1::Solution* _internal_mutable_solution();

  public:
  // .ommx.v1.Infeasible infeasible = 3 [json_name = "infeasible"];
  bool has_infeasible() const;
  private:
  bool _internal_has_infeasible() const;

  public:
  void clear_infeasible() ;
  const ::ommx::v1::Infeasible& infeasible() const;
  PROTOBUF_NODISCARD ::ommx::v1::Infeasible* release_infeasible();
  ::ommx::v1::Infeasible* mutable_infeasible();
  void set_allocated_infeasible(::ommx::v1::Infeasible* value);
  void unsafe_arena_set_allocated_infeasible(::ommx::v1::Infeasible* value);
  ::ommx::v1::Infeasible* unsafe_arena_release_infeasible();

  private:
  const ::ommx::v1::Infeasible& _internal_infeasible() const;
  ::ommx::v1::Infeasible* _internal_mutable_infeasible();

  public:
  // .ommx.v1.Unbounded unbounded = 4 [json_name = "unbounded"];
  bool has_unbounded() const;
  private:
  bool _internal_has_unbounded() const;

  public:
  void clear_unbounded() ;
  const ::ommx::v1::Unbounded& unbounded() const;
  PROTOBUF_NODISCARD ::ommx::v1::Unbounded* release_unbounded();
  ::ommx::v1::Unbounded* mutable_unbounded();
  void set_allocated_unbounded(::ommx::v1::Unbounded* value);
  void unsafe_arena_set_allocated_unbounded(::ommx::v1::Unbounded* value);
  ::ommx::v1::Unbounded* unsafe_arena_release_unbounded();

  private:
  const ::ommx::v1::Unbounded& _internal_unbounded() const;
  ::ommx::v1::Unbounded* _internal_mutable_unbounded();

  public:
  void clear_result();
  ResultCase result_case() const;
  // @@protoc_insertion_point(class_scope:ommx.v1.Result)
 private:
  class _Internal;
  void set_has_error();
  void set_has_solution();
  void set_has_infeasible();
  void set_has_unbounded();
  inline bool has_result() const;
  inline void clear_has_result();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 4, 3,
      28, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Result_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Result& from_msg);
    union ResultUnion {
      constexpr ResultUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::google::protobuf::internal::ArenaStringPtr error_;
      ::ommx::v1::Solution* solution_;
      ::ommx::v1::Infeasible* infeasible_;
      ::ommx::v1::Unbounded* unbounded_;
    } result_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ommx_2fv1_2fsolution_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// State

// map<uint64, double> entries = 1 [json_name = "entries"];
inline int State::_internal_entries_size() const {
  return _internal_entries().size();
}
inline int State::entries_size() const {
  return _internal_entries_size();
}
inline void State::clear_entries() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.entries_.Clear();
}
inline const ::google::protobuf::Map<::uint64_t, double>& State::_internal_entries() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.entries_.GetMap();
}
inline const ::google::protobuf::Map<::uint64_t, double>& State::entries() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:ommx.v1.State.entries)
  return _internal_entries();
}
inline ::google::protobuf::Map<::uint64_t, double>* State::_internal_mutable_entries() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.entries_.MutableMap();
}
inline ::google::protobuf::Map<::uint64_t, double>* State::mutable_entries() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:ommx.v1.State.entries)
  return _internal_mutable_entries();
}

// -------------------------------------------------------------------

// Solution

// .ommx.v1.State state = 1 [json_name = "state"];
inline bool Solution::has_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.state_ != nullptr);
  return value;
}
inline void Solution::clear_state() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.state_ != nullptr) _impl_.state_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::ommx::v1::State& Solution::_internal_state() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::ommx::v1::State* p = _impl_.state_;
  return p != nullptr ? *p : reinterpret_cast<const ::ommx::v1::State&>(::ommx::v1::_State_default_instance_);
}
inline const ::ommx::v1::State& Solution::state() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ommx.v1.Solution.state)
  return _internal_state();
}
inline void Solution::unsafe_arena_set_allocated_state(::ommx::v1::State* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.state_);
  }
  _impl_.state_ = reinterpret_cast<::ommx::v1::State*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ommx.v1.Solution.state)
}
inline ::ommx::v1::State* Solution::release_state() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ommx::v1::State* released = _impl_.state_;
  _impl_.state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::ommx::v1::State* Solution::unsafe_arena_release_state() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ommx.v1.Solution.state)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ommx::v1::State* temp = _impl_.state_;
  _impl_.state_ = nullptr;
  return temp;
}
inline ::ommx::v1::State* Solution::_internal_mutable_state() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.state_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::ommx::v1::State>(GetArena());
    _impl_.state_ = reinterpret_cast<::ommx::v1::State*>(p);
  }
  return _impl_.state_;
}
inline ::ommx::v1::State* Solution::mutable_state() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::ommx::v1::State* _msg = _internal_mutable_state();
  // @@protoc_insertion_point(field_mutable:ommx.v1.Solution.state)
  return _msg;
}
inline void Solution::set_allocated_state(::ommx::v1::State* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.state_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.state_ = reinterpret_cast<::ommx::v1::State*>(value);
  // @@protoc_insertion_point(field_set_allocated:ommx.v1.Solution.state)
}

// double objective = 2 [json_name = "objective"];
inline void Solution::clear_objective() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.objective_ = 0;
}
inline double Solution::objective() const {
  // @@protoc_insertion_point(field_get:ommx.v1.Solution.objective)
  return _internal_objective();
}
inline void Solution::set_objective(double value) {
  _internal_set_objective(value);
  // @@protoc_insertion_point(field_set:ommx.v1.Solution.objective)
}
inline double Solution::_internal_objective() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.objective_;
}
inline void Solution::_internal_set_objective(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.objective_ = value;
}

// repeated .ommx.v1.DecisionVariable decision_variables = 3 [json_name = "decisionVariables"];
inline int Solution::_internal_decision_variables_size() const {
  return _internal_decision_variables().size();
}
inline int Solution::decision_variables_size() const {
  return _internal_decision_variables_size();
}
inline ::ommx::v1::DecisionVariable* Solution::mutable_decision_variables(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:ommx.v1.Solution.decision_variables)
  return _internal_mutable_decision_variables()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::ommx::v1::DecisionVariable>* Solution::mutable_decision_variables()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:ommx.v1.Solution.decision_variables)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_decision_variables();
}
inline const ::ommx::v1::DecisionVariable& Solution::decision_variables(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ommx.v1.Solution.decision_variables)
  return _internal_decision_variables().Get(index);
}
inline ::ommx::v1::DecisionVariable* Solution::add_decision_variables() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::ommx::v1::DecisionVariable* _add = _internal_mutable_decision_variables()->Add();
  // @@protoc_insertion_point(field_add:ommx.v1.Solution.decision_variables)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::ommx::v1::DecisionVariable>& Solution::decision_variables() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:ommx.v1.Solution.decision_variables)
  return _internal_decision_variables();
}
inline const ::google::protobuf::RepeatedPtrField<::ommx::v1::DecisionVariable>&
Solution::_internal_decision_variables() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.decision_variables_;
}
inline ::google::protobuf::RepeatedPtrField<::ommx::v1::DecisionVariable>*
Solution::_internal_mutable_decision_variables() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.decision_variables_;
}

// repeated .ommx.v1.EvaluatedConstraint evaluated_constraints = 4 [json_name = "evaluatedConstraints"];
inline int Solution::_internal_evaluated_constraints_size() const {
  return _internal_evaluated_constraints().size();
}
inline int Solution::evaluated_constraints_size() const {
  return _internal_evaluated_constraints_size();
}
inline ::ommx::v1::EvaluatedConstraint* Solution::mutable_evaluated_constraints(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:ommx.v1.Solution.evaluated_constraints)
  return _internal_mutable_evaluated_constraints()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::ommx::v1::EvaluatedConstraint>* Solution::mutable_evaluated_constraints()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:ommx.v1.Solution.evaluated_constraints)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_evaluated_constraints();
}
inline const ::ommx::v1::EvaluatedConstraint& Solution::evaluated_constraints(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ommx.v1.Solution.evaluated_constraints)
  return _internal_evaluated_constraints().Get(index);
}
inline ::ommx::v1::EvaluatedConstraint* Solution::add_evaluated_constraints() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::ommx::v1::EvaluatedConstraint* _add = _internal_mutable_evaluated_constraints()->Add();
  // @@protoc_insertion_point(field_add:ommx.v1.Solution.evaluated_constraints)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::ommx::v1::EvaluatedConstraint>& Solution::evaluated_constraints() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:ommx.v1.Solution.evaluated_constraints)
  return _internal_evaluated_constraints();
}
inline const ::google::protobuf::RepeatedPtrField<::ommx::v1::EvaluatedConstraint>&
Solution::_internal_evaluated_constraints() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.evaluated_constraints_;
}
inline ::google::protobuf::RepeatedPtrField<::ommx::v1::EvaluatedConstraint>*
Solution::_internal_mutable_evaluated_constraints() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.evaluated_constraints_;
}

// bool feasible = 5 [json_name = "feasible"];
inline void Solution::clear_feasible() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.feasible_ = false;
}
inline bool Solution::feasible() const {
  // @@protoc_insertion_point(field_get:ommx.v1.Solution.feasible)
  return _internal_feasible();
}
inline void Solution::set_feasible(bool value) {
  _internal_set_feasible(value);
  // @@protoc_insertion_point(field_set:ommx.v1.Solution.feasible)
}
inline bool Solution::_internal_feasible() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.feasible_;
}
inline void Solution::_internal_set_feasible(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.feasible_ = value;
}

// .ommx.v1.Optimality optimality = 6 [json_name = "optimality"];
inline void Solution::clear_optimality() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.optimality_ = 0;
}
inline ::ommx::v1::Optimality Solution::optimality() const {
  // @@protoc_insertion_point(field_get:ommx.v1.Solution.optimality)
  return _internal_optimality();
}
inline void Solution::set_optimality(::ommx::v1::Optimality value) {
  _internal_set_optimality(value);
  // @@protoc_insertion_point(field_set:ommx.v1.Solution.optimality)
}
inline ::ommx::v1::Optimality Solution::_internal_optimality() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::ommx::v1::Optimality>(_impl_.optimality_);
}
inline void Solution::_internal_set_optimality(::ommx::v1::Optimality value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.optimality_ = value;
}

// .ommx.v1.Relaxation relaxation = 7 [json_name = "relaxation"];
inline void Solution::clear_relaxation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.relaxation_ = 0;
}
inline ::ommx::v1::Relaxation Solution::relaxation() const {
  // @@protoc_insertion_point(field_get:ommx.v1.Solution.relaxation)
  return _internal_relaxation();
}
inline void Solution::set_relaxation(::ommx::v1::Relaxation value) {
  _internal_set_relaxation(value);
  // @@protoc_insertion_point(field_set:ommx.v1.Solution.relaxation)
}
inline ::ommx::v1::Relaxation Solution::_internal_relaxation() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::ommx::v1::Relaxation>(_impl_.relaxation_);
}
inline void Solution::_internal_set_relaxation(::ommx::v1::Relaxation value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.relaxation_ = value;
}

// -------------------------------------------------------------------

// Infeasible

// -------------------------------------------------------------------

// Unbounded

// -------------------------------------------------------------------

// Result

// string error = 1 [json_name = "error"];
inline bool Result::has_error() const {
  return result_case() == kError;
}
inline void Result::set_has_error() {
  _impl_._oneof_case_[0] = kError;
}
inline void Result::clear_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (result_case() == kError) {
    _impl_.result_.error_.Destroy();
    clear_has_result();
  }
}
inline const std::string& Result::error() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ommx.v1.Result.error)
  return _internal_error();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Result::set_error(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (result_case() != kError) {
    clear_result();

    set_has_error();
    _impl_.result_.error_.InitDefault();
  }
  _impl_.result_.error_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ommx.v1.Result.error)
}
inline std::string* Result::mutable_error() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:ommx.v1.Result.error)
  return _s;
}
inline const std::string& Result::_internal_error() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  if (result_case() != kError) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.result_.error_.Get();
}
inline void Result::_internal_set_error(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (result_case() != kError) {
    clear_result();

    set_has_error();
    _impl_.result_.error_.InitDefault();
  }
  _impl_.result_.error_.Set(value, GetArena());
}
inline std::string* Result::_internal_mutable_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (result_case() != kError) {
    clear_result();

    set_has_error();
    _impl_.result_.error_.InitDefault();
  }
  return _impl_.result_.error_.Mutable( GetArena());
}
inline std::string* Result::release_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ommx.v1.Result.error)
  if (result_case() != kError) {
    return nullptr;
  }
  clear_has_result();
  return _impl_.result_.error_.Release();
}
inline void Result::set_allocated_error(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (has_result()) {
    clear_result();
  }
  if (value != nullptr) {
    set_has_error();
    _impl_.result_.error_.InitAllocated(value, GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ommx.v1.Result.error)
}

// .ommx.v1.Solution solution = 2 [json_name = "solution"];
inline bool Result::has_solution() const {
  return result_case() == kSolution;
}
inline bool Result::_internal_has_solution() const {
  return result_case() == kSolution;
}
inline void Result::set_has_solution() {
  _impl_._oneof_case_[0] = kSolution;
}
inline void Result::clear_solution() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (result_case() == kSolution) {
    if (GetArena() == nullptr) {
      delete _impl_.result_.solution_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.result_.solution_);
    }
    clear_has_result();
  }
}
inline ::ommx::v1::Solution* Result::release_solution() {
  // @@protoc_insertion_point(field_release:ommx.v1.Result.solution)
  if (result_case() == kSolution) {
    clear_has_result();
    auto* temp = _impl_.result_.solution_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.result_.solution_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ommx::v1::Solution& Result::_internal_solution() const {
  return result_case() == kSolution ? *_impl_.result_.solution_ : reinterpret_cast<::ommx::v1::Solution&>(::ommx::v1::_Solution_default_instance_);
}
inline const ::ommx::v1::Solution& Result::solution() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ommx.v1.Result.solution)
  return _internal_solution();
}
inline ::ommx::v1::Solution* Result::unsafe_arena_release_solution() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ommx.v1.Result.solution)
  if (result_case() == kSolution) {
    clear_has_result();
    auto* temp = _impl_.result_.solution_;
    _impl_.result_.solution_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Result::unsafe_arena_set_allocated_solution(::ommx::v1::Solution* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_result();
  if (value) {
    set_has_solution();
    _impl_.result_.solution_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ommx.v1.Result.solution)
}
inline ::ommx::v1::Solution* Result::_internal_mutable_solution() {
  if (result_case() != kSolution) {
    clear_result();
    set_has_solution();
    _impl_.result_.solution_ =
        ::google::protobuf::Message::DefaultConstruct<::ommx::v1::Solution>(GetArena());
  }
  return _impl_.result_.solution_;
}
inline ::ommx::v1::Solution* Result::mutable_solution() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::ommx::v1::Solution* _msg = _internal_mutable_solution();
  // @@protoc_insertion_point(field_mutable:ommx.v1.Result.solution)
  return _msg;
}

// .ommx.v1.Infeasible infeasible = 3 [json_name = "infeasible"];
inline bool Result::has_infeasible() const {
  return result_case() == kInfeasible;
}
inline bool Result::_internal_has_infeasible() const {
  return result_case() == kInfeasible;
}
inline void Result::set_has_infeasible() {
  _impl_._oneof_case_[0] = kInfeasible;
}
inline void Result::clear_infeasible() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (result_case() == kInfeasible) {
    if (GetArena() == nullptr) {
      delete _impl_.result_.infeasible_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.result_.infeasible_);
    }
    clear_has_result();
  }
}
inline ::ommx::v1::Infeasible* Result::release_infeasible() {
  // @@protoc_insertion_point(field_release:ommx.v1.Result.infeasible)
  if (result_case() == kInfeasible) {
    clear_has_result();
    auto* temp = _impl_.result_.infeasible_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.result_.infeasible_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ommx::v1::Infeasible& Result::_internal_infeasible() const {
  return result_case() == kInfeasible ? *_impl_.result_.infeasible_ : reinterpret_cast<::ommx::v1::Infeasible&>(::ommx::v1::_Infeasible_default_instance_);
}
inline const ::ommx::v1::Infeasible& Result::infeasible() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ommx.v1.Result.infeasible)
  return _internal_infeasible();
}
inline ::ommx::v1::Infeasible* Result::unsafe_arena_release_infeasible() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ommx.v1.Result.infeasible)
  if (result_case() == kInfeasible) {
    clear_has_result();
    auto* temp = _impl_.result_.infeasible_;
    _impl_.result_.infeasible_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Result::unsafe_arena_set_allocated_infeasible(::ommx::v1::Infeasible* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_result();
  if (value) {
    set_has_infeasible();
    _impl_.result_.infeasible_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ommx.v1.Result.infeasible)
}
inline ::ommx::v1::Infeasible* Result::_internal_mutable_infeasible() {
  if (result_case() != kInfeasible) {
    clear_result();
    set_has_infeasible();
    _impl_.result_.infeasible_ =
        ::google::protobuf::Message::DefaultConstruct<::ommx::v1::Infeasible>(GetArena());
  }
  return _impl_.result_.infeasible_;
}
inline ::ommx::v1::Infeasible* Result::mutable_infeasible() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::ommx::v1::Infeasible* _msg = _internal_mutable_infeasible();
  // @@protoc_insertion_point(field_mutable:ommx.v1.Result.infeasible)
  return _msg;
}

// .ommx.v1.Unbounded unbounded = 4 [json_name = "unbounded"];
inline bool Result::has_unbounded() const {
  return result_case() == kUnbounded;
}
inline bool Result::_internal_has_unbounded() const {
  return result_case() == kUnbounded;
}
inline void Result::set_has_unbounded() {
  _impl_._oneof_case_[0] = kUnbounded;
}
inline void Result::clear_unbounded() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (result_case() == kUnbounded) {
    if (GetArena() == nullptr) {
      delete _impl_.result_.unbounded_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.result_.unbounded_);
    }
    clear_has_result();
  }
}
inline ::ommx::v1::Unbounded* Result::release_unbounded() {
  // @@protoc_insertion_point(field_release:ommx.v1.Result.unbounded)
  if (result_case() == kUnbounded) {
    clear_has_result();
    auto* temp = _impl_.result_.unbounded_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.result_.unbounded_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ommx::v1::Unbounded& Result::_internal_unbounded() const {
  return result_case() == kUnbounded ? *_impl_.result_.unbounded_ : reinterpret_cast<::ommx::v1::Unbounded&>(::ommx::v1::_Unbounded_default_instance_);
}
inline const ::ommx::v1::Unbounded& Result::unbounded() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ommx.v1.Result.unbounded)
  return _internal_unbounded();
}
inline ::ommx::v1::Unbounded* Result::unsafe_arena_release_unbounded() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ommx.v1.Result.unbounded)
  if (result_case() == kUnbounded) {
    clear_has_result();
    auto* temp = _impl_.result_.unbounded_;
    _impl_.result_.unbounded_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Result::unsafe_arena_set_allocated_unbounded(::ommx::v1::Unbounded* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_result();
  if (value) {
    set_has_unbounded();
    _impl_.result_.unbounded_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ommx.v1.Result.unbounded)
}
inline ::ommx::v1::Unbounded* Result::_internal_mutable_unbounded() {
  if (result_case() != kUnbounded) {
    clear_result();
    set_has_unbounded();
    _impl_.result_.unbounded_ =
        ::google::protobuf::Message::DefaultConstruct<::ommx::v1::Unbounded>(GetArena());
  }
  return _impl_.result_.unbounded_;
}
inline ::ommx::v1::Unbounded* Result::mutable_unbounded() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::ommx::v1::Unbounded* _msg = _internal_mutable_unbounded();
  // @@protoc_insertion_point(field_mutable:ommx.v1.Result.unbounded)
  return _msg;
}

inline bool Result::has_result() const {
  return result_case() != RESULT_NOT_SET;
}
inline void Result::clear_has_result() {
  _impl_._oneof_case_[0] = RESULT_NOT_SET;
}
inline Result::ResultCase Result::result_case() const {
  return Result::ResultCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace ommx


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::ommx::v1::Optimality> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::ommx::v1::Optimality>() {
  return ::ommx::v1::Optimality_descriptor();
}
template <>
struct is_proto_enum<::ommx::v1::Relaxation> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::ommx::v1::Relaxation>() {
  return ::ommx::v1::Relaxation_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_ommx_2fv1_2fsolution_2eproto_2epb_2eh
