// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: ommx/v1/constraint.proto
// Protobuf C++ Version: 5.27.3

#ifndef GOOGLE_PROTOBUF_INCLUDED_ommx_2fv1_2fconstraint_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_ommx_2fv1_2fconstraint_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5027003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "ommx/v1/function.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_ommx_2fv1_2fconstraint_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_ommx_2fv1_2fconstraint_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_ommx_2fv1_2fconstraint_2eproto;
namespace ommx {
namespace v1 {
class Constraint;
struct ConstraintDefaultTypeInternal;
extern ConstraintDefaultTypeInternal _Constraint_default_instance_;
class Constraint_ParametersEntry_DoNotUse;
struct Constraint_ParametersEntry_DoNotUseDefaultTypeInternal;
extern Constraint_ParametersEntry_DoNotUseDefaultTypeInternal _Constraint_ParametersEntry_DoNotUse_default_instance_;
class EvaluatedConstraint;
struct EvaluatedConstraintDefaultTypeInternal;
extern EvaluatedConstraintDefaultTypeInternal _EvaluatedConstraint_default_instance_;
class EvaluatedConstraint_ParametersEntry_DoNotUse;
struct EvaluatedConstraint_ParametersEntry_DoNotUseDefaultTypeInternal;
extern EvaluatedConstraint_ParametersEntry_DoNotUseDefaultTypeInternal _EvaluatedConstraint_ParametersEntry_DoNotUse_default_instance_;
}  // namespace v1
}  // namespace ommx
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace ommx {
namespace v1 {
enum Equality : int {
  EQUALITY_UNSPECIFIED = 0,
  EQUALITY_EQUAL_TO_ZERO = 1,
  EQUALITY_LESS_THAN_OR_EQUAL_TO_ZERO = 2,
  Equality_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Equality_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Equality_IsValid(int value);
extern const uint32_t Equality_internal_data_[];
constexpr Equality Equality_MIN = static_cast<Equality>(0);
constexpr Equality Equality_MAX = static_cast<Equality>(2);
constexpr int Equality_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
Equality_descriptor();
template <typename T>
const std::string& Equality_Name(T value) {
  static_assert(std::is_same<T, Equality>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Equality_Name().");
  return Equality_Name(static_cast<Equality>(value));
}
template <>
inline const std::string& Equality_Name(Equality value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Equality_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool Equality_Parse(absl::string_view name, Equality* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Equality>(
      Equality_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class EvaluatedConstraint_ParametersEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          EvaluatedConstraint_ParametersEntry_DoNotUse, std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      EvaluatedConstraint_ParametersEntry_DoNotUse, std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  EvaluatedConstraint_ParametersEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR EvaluatedConstraint_ParametersEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit EvaluatedConstraint_ParametersEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const EvaluatedConstraint_ParametersEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const EvaluatedConstraint_ParametersEntry_DoNotUse*>(
        &_EvaluatedConstraint_ParametersEntry_DoNotUse_default_instance_);
  }
const ::google::protobuf::Message::ClassData* GetClassData() const final;
  friend struct ::TableStruct_ommx_2fv1_2fconstraint_2eproto;
};
// -------------------------------------------------------------------

class Constraint_ParametersEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          Constraint_ParametersEntry_DoNotUse, std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      Constraint_ParametersEntry_DoNotUse, std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  Constraint_ParametersEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Constraint_ParametersEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit Constraint_ParametersEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const Constraint_ParametersEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const Constraint_ParametersEntry_DoNotUse*>(
        &_Constraint_ParametersEntry_DoNotUse_default_instance_);
  }
const ::google::protobuf::Message::ClassData* GetClassData() const final;
  friend struct ::TableStruct_ommx_2fv1_2fconstraint_2eproto;
};
// -------------------------------------------------------------------

class EvaluatedConstraint final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ommx.v1.EvaluatedConstraint) */ {
 public:
  inline EvaluatedConstraint() : EvaluatedConstraint(nullptr) {}
  ~EvaluatedConstraint() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR EvaluatedConstraint(
      ::google::protobuf::internal::ConstantInitialized);

  inline EvaluatedConstraint(const EvaluatedConstraint& from) : EvaluatedConstraint(nullptr, from) {}
  inline EvaluatedConstraint(EvaluatedConstraint&& from) noexcept
      : EvaluatedConstraint(nullptr, std::move(from)) {}
  inline EvaluatedConstraint& operator=(const EvaluatedConstraint& from) {
    CopyFrom(from);
    return *this;
  }
  inline EvaluatedConstraint& operator=(EvaluatedConstraint&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EvaluatedConstraint& default_instance() {
    return *internal_default_instance();
  }
  static inline const EvaluatedConstraint* internal_default_instance() {
    return reinterpret_cast<const EvaluatedConstraint*>(
        &_EvaluatedConstraint_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(EvaluatedConstraint& a, EvaluatedConstraint& b) { a.Swap(&b); }
  inline void Swap(EvaluatedConstraint* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EvaluatedConstraint* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EvaluatedConstraint* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<EvaluatedConstraint>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const EvaluatedConstraint& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const EvaluatedConstraint& from) { EvaluatedConstraint::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(EvaluatedConstraint* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "ommx.v1.EvaluatedConstraint"; }

 protected:
  explicit EvaluatedConstraint(::google::protobuf::Arena* arena);
  EvaluatedConstraint(::google::protobuf::Arena* arena, const EvaluatedConstraint& from);
  EvaluatedConstraint(::google::protobuf::Arena* arena, EvaluatedConstraint&& from) noexcept
      : EvaluatedConstraint(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUsedDecisionVariableIdsFieldNumber = 4,
    kParametersFieldNumber = 5,
    kSubscriptsFieldNumber = 9,
    kNameFieldNumber = 6,
    kDescriptionFieldNumber = 7,
    kIdFieldNumber = 1,
    kEvaluatedValueFieldNumber = 3,
    kDualVariableFieldNumber = 8,
    kEqualityFieldNumber = 2,
  };
  // repeated uint64 used_decision_variable_ids = 4;
  int used_decision_variable_ids_size() const;
  private:
  int _internal_used_decision_variable_ids_size() const;

  public:
  void clear_used_decision_variable_ids() ;
  ::uint64_t used_decision_variable_ids(int index) const;
  void set_used_decision_variable_ids(int index, ::uint64_t value);
  void add_used_decision_variable_ids(::uint64_t value);
  const ::google::protobuf::RepeatedField<::uint64_t>& used_decision_variable_ids() const;
  ::google::protobuf::RepeatedField<::uint64_t>* mutable_used_decision_variable_ids();

  private:
  const ::google::protobuf::RepeatedField<::uint64_t>& _internal_used_decision_variable_ids() const;
  ::google::protobuf::RepeatedField<::uint64_t>* _internal_mutable_used_decision_variable_ids();

  public:
  // map<string, string> parameters = 5;
  int parameters_size() const;
  private:
  int _internal_parameters_size() const;

  public:
  void clear_parameters() ;
  const ::google::protobuf::Map<std::string, std::string>& parameters() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_parameters();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_parameters() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_parameters();

  public:
  // repeated int64 subscripts = 9;
  int subscripts_size() const;
  private:
  int _internal_subscripts_size() const;

  public:
  void clear_subscripts() ;
  ::int64_t subscripts(int index) const;
  void set_subscripts(int index, ::int64_t value);
  void add_subscripts(::int64_t value);
  const ::google::protobuf::RepeatedField<::int64_t>& subscripts() const;
  ::google::protobuf::RepeatedField<::int64_t>* mutable_subscripts();

  private:
  const ::google::protobuf::RepeatedField<::int64_t>& _internal_subscripts() const;
  ::google::protobuf::RepeatedField<::int64_t>* _internal_mutable_subscripts();

  public:
  // optional string name = 6;
  bool has_name() const;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // optional string description = 7;
  bool has_description() const;
  void clear_description() ;
  const std::string& description() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_description(Arg_&& arg, Args_... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* value);

  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(
      const std::string& value);
  std::string* _internal_mutable_description();

  public:
  // uint64 id = 1;
  void clear_id() ;
  ::uint64_t id() const;
  void set_id(::uint64_t value);

  private:
  ::uint64_t _internal_id() const;
  void _internal_set_id(::uint64_t value);

  public:
  // double evaluated_value = 3;
  void clear_evaluated_value() ;
  double evaluated_value() const;
  void set_evaluated_value(double value);

  private:
  double _internal_evaluated_value() const;
  void _internal_set_evaluated_value(double value);

  public:
  // optional double dual_variable = 8;
  bool has_dual_variable() const;
  void clear_dual_variable() ;
  double dual_variable() const;
  void set_dual_variable(double value);

  private:
  double _internal_dual_variable() const;
  void _internal_set_dual_variable(double value);

  public:
  // .ommx.v1.Equality equality = 2;
  void clear_equality() ;
  ::ommx::v1::Equality equality() const;
  void set_equality(::ommx::v1::Equality value);

  private:
  ::ommx::v1::Equality _internal_equality() const;
  void _internal_set_equality(::ommx::v1::Equality value);

  public:
  // @@protoc_insertion_point(class_scope:ommx.v1.EvaluatedConstraint)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 9, 1,
      69, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_EvaluatedConstraint_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const EvaluatedConstraint& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<::uint64_t> used_decision_variable_ids_;
    mutable ::google::protobuf::internal::CachedSize _used_decision_variable_ids_cached_byte_size_;
    ::google::protobuf::internal::MapField<EvaluatedConstraint_ParametersEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        parameters_;
    ::google::protobuf::RepeatedField<::int64_t> subscripts_;
    mutable ::google::protobuf::internal::CachedSize _subscripts_cached_byte_size_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr description_;
    ::uint64_t id_;
    double evaluated_value_;
    double dual_variable_;
    int equality_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ommx_2fv1_2fconstraint_2eproto;
};
// -------------------------------------------------------------------

class Constraint final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ommx.v1.Constraint) */ {
 public:
  inline Constraint() : Constraint(nullptr) {}
  ~Constraint() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Constraint(
      ::google::protobuf::internal::ConstantInitialized);

  inline Constraint(const Constraint& from) : Constraint(nullptr, from) {}
  inline Constraint(Constraint&& from) noexcept
      : Constraint(nullptr, std::move(from)) {}
  inline Constraint& operator=(const Constraint& from) {
    CopyFrom(from);
    return *this;
  }
  inline Constraint& operator=(Constraint&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Constraint& default_instance() {
    return *internal_default_instance();
  }
  static inline const Constraint* internal_default_instance() {
    return reinterpret_cast<const Constraint*>(
        &_Constraint_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(Constraint& a, Constraint& b) { a.Swap(&b); }
  inline void Swap(Constraint* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Constraint* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Constraint* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Constraint>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Constraint& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Constraint& from) { Constraint::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Constraint* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "ommx.v1.Constraint"; }

 protected:
  explicit Constraint(::google::protobuf::Arena* arena);
  Constraint(::google::protobuf::Arena* arena, const Constraint& from);
  Constraint(::google::protobuf::Arena* arena, Constraint&& from) noexcept
      : Constraint(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kParametersFieldNumber = 5,
    kSubscriptsFieldNumber = 8,
    kNameFieldNumber = 6,
    kDescriptionFieldNumber = 7,
    kFunctionFieldNumber = 3,
    kIdFieldNumber = 1,
    kEqualityFieldNumber = 2,
  };
  // map<string, string> parameters = 5;
  int parameters_size() const;
  private:
  int _internal_parameters_size() const;

  public:
  void clear_parameters() ;
  const ::google::protobuf::Map<std::string, std::string>& parameters() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_parameters();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_parameters() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_parameters();

  public:
  // repeated int64 subscripts = 8;
  int subscripts_size() const;
  private:
  int _internal_subscripts_size() const;

  public:
  void clear_subscripts() ;
  ::int64_t subscripts(int index) const;
  void set_subscripts(int index, ::int64_t value);
  void add_subscripts(::int64_t value);
  const ::google::protobuf::RepeatedField<::int64_t>& subscripts() const;
  ::google::protobuf::RepeatedField<::int64_t>* mutable_subscripts();

  private:
  const ::google::protobuf::RepeatedField<::int64_t>& _internal_subscripts() const;
  ::google::protobuf::RepeatedField<::int64_t>* _internal_mutable_subscripts();

  public:
  // optional string name = 6;
  bool has_name() const;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // optional string description = 7;
  bool has_description() const;
  void clear_description() ;
  const std::string& description() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_description(Arg_&& arg, Args_... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* value);

  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(
      const std::string& value);
  std::string* _internal_mutable_description();

  public:
  // .ommx.v1.Function function = 3;
  bool has_function() const;
  void clear_function() ;
  const ::ommx::v1::Function& function() const;
  PROTOBUF_NODISCARD ::ommx::v1::Function* release_function();
  ::ommx::v1::Function* mutable_function();
  void set_allocated_function(::ommx::v1::Function* value);
  void unsafe_arena_set_allocated_function(::ommx::v1::Function* value);
  ::ommx::v1::Function* unsafe_arena_release_function();

  private:
  const ::ommx::v1::Function& _internal_function() const;
  ::ommx::v1::Function* _internal_mutable_function();

  public:
  // uint64 id = 1;
  void clear_id() ;
  ::uint64_t id() const;
  void set_id(::uint64_t value);

  private:
  ::uint64_t _internal_id() const;
  void _internal_set_id(::uint64_t value);

  public:
  // .ommx.v1.Equality equality = 2;
  void clear_equality() ;
  ::ommx::v1::Equality equality() const;
  void set_equality(::ommx::v1::Equality value);

  private:
  ::ommx::v1::Equality _internal_equality() const;
  void _internal_set_equality(::ommx::v1::Equality value);

  public:
  // @@protoc_insertion_point(class_scope:ommx.v1.Constraint)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 2,
      52, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Constraint_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Constraint& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::MapField<Constraint_ParametersEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        parameters_;
    ::google::protobuf::RepeatedField<::int64_t> subscripts_;
    mutable ::google::protobuf::internal::CachedSize _subscripts_cached_byte_size_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr description_;
    ::ommx::v1::Function* function_;
    ::uint64_t id_;
    int equality_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ommx_2fv1_2fconstraint_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Constraint

// uint64 id = 1;
inline void Constraint::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = ::uint64_t{0u};
}
inline ::uint64_t Constraint::id() const {
  // @@protoc_insertion_point(field_get:ommx.v1.Constraint.id)
  return _internal_id();
}
inline void Constraint::set_id(::uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:ommx.v1.Constraint.id)
}
inline ::uint64_t Constraint::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_;
}
inline void Constraint::_internal_set_id(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = value;
}

// .ommx.v1.Equality equality = 2;
inline void Constraint::clear_equality() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.equality_ = 0;
}
inline ::ommx::v1::Equality Constraint::equality() const {
  // @@protoc_insertion_point(field_get:ommx.v1.Constraint.equality)
  return _internal_equality();
}
inline void Constraint::set_equality(::ommx::v1::Equality value) {
  _internal_set_equality(value);
  // @@protoc_insertion_point(field_set:ommx.v1.Constraint.equality)
}
inline ::ommx::v1::Equality Constraint::_internal_equality() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::ommx::v1::Equality>(_impl_.equality_);
}
inline void Constraint::_internal_set_equality(::ommx::v1::Equality value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.equality_ = value;
}

// .ommx.v1.Function function = 3;
inline bool Constraint::has_function() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.function_ != nullptr);
  return value;
}
inline const ::ommx::v1::Function& Constraint::_internal_function() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::ommx::v1::Function* p = _impl_.function_;
  return p != nullptr ? *p : reinterpret_cast<const ::ommx::v1::Function&>(::ommx::v1::_Function_default_instance_);
}
inline const ::ommx::v1::Function& Constraint::function() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ommx.v1.Constraint.function)
  return _internal_function();
}
inline void Constraint::unsafe_arena_set_allocated_function(::ommx::v1::Function* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.function_);
  }
  _impl_.function_ = reinterpret_cast<::ommx::v1::Function*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ommx.v1.Constraint.function)
}
inline ::ommx::v1::Function* Constraint::release_function() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::ommx::v1::Function* released = _impl_.function_;
  _impl_.function_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::ommx::v1::Function* Constraint::unsafe_arena_release_function() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ommx.v1.Constraint.function)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::ommx::v1::Function* temp = _impl_.function_;
  _impl_.function_ = nullptr;
  return temp;
}
inline ::ommx::v1::Function* Constraint::_internal_mutable_function() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.function_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::ommx::v1::Function>(GetArena());
    _impl_.function_ = reinterpret_cast<::ommx::v1::Function*>(p);
  }
  return _impl_.function_;
}
inline ::ommx::v1::Function* Constraint::mutable_function() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::ommx::v1::Function* _msg = _internal_mutable_function();
  // @@protoc_insertion_point(field_mutable:ommx.v1.Constraint.function)
  return _msg;
}
inline void Constraint::set_allocated_function(::ommx::v1::Function* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.function_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.function_ = reinterpret_cast<::ommx::v1::Function*>(value);
  // @@protoc_insertion_point(field_set_allocated:ommx.v1.Constraint.function)
}

// repeated int64 subscripts = 8;
inline int Constraint::_internal_subscripts_size() const {
  return _internal_subscripts().size();
}
inline int Constraint::subscripts_size() const {
  return _internal_subscripts_size();
}
inline void Constraint::clear_subscripts() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.subscripts_.Clear();
}
inline ::int64_t Constraint::subscripts(int index) const {
  // @@protoc_insertion_point(field_get:ommx.v1.Constraint.subscripts)
  return _internal_subscripts().Get(index);
}
inline void Constraint::set_subscripts(int index, ::int64_t value) {
  _internal_mutable_subscripts()->Set(index, value);
  // @@protoc_insertion_point(field_set:ommx.v1.Constraint.subscripts)
}
inline void Constraint::add_subscripts(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_subscripts()->Add(value);
  // @@protoc_insertion_point(field_add:ommx.v1.Constraint.subscripts)
}
inline const ::google::protobuf::RepeatedField<::int64_t>& Constraint::subscripts() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:ommx.v1.Constraint.subscripts)
  return _internal_subscripts();
}
inline ::google::protobuf::RepeatedField<::int64_t>* Constraint::mutable_subscripts()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:ommx.v1.Constraint.subscripts)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_subscripts();
}
inline const ::google::protobuf::RepeatedField<::int64_t>&
Constraint::_internal_subscripts() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.subscripts_;
}
inline ::google::protobuf::RepeatedField<::int64_t>* Constraint::_internal_mutable_subscripts() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.subscripts_;
}

// map<string, string> parameters = 5;
inline int Constraint::_internal_parameters_size() const {
  return _internal_parameters().size();
}
inline int Constraint::parameters_size() const {
  return _internal_parameters_size();
}
inline void Constraint::clear_parameters() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.parameters_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& Constraint::_internal_parameters() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.parameters_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& Constraint::parameters() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:ommx.v1.Constraint.parameters)
  return _internal_parameters();
}
inline ::google::protobuf::Map<std::string, std::string>* Constraint::_internal_mutable_parameters() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.parameters_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* Constraint::mutable_parameters() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:ommx.v1.Constraint.parameters)
  return _internal_mutable_parameters();
}

// optional string name = 6;
inline bool Constraint::has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Constraint::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Constraint::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ommx.v1.Constraint.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Constraint::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ommx.v1.Constraint.name)
}
inline std::string* Constraint::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:ommx.v1.Constraint.name)
  return _s;
}
inline const std::string& Constraint::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void Constraint::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* Constraint::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* Constraint::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ommx.v1.Constraint.name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Constraint::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ommx.v1.Constraint.name)
}

// optional string description = 7;
inline bool Constraint::has_description() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Constraint::clear_description() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.description_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Constraint::description() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ommx.v1.Constraint.description)
  return _internal_description();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Constraint::set_description(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.description_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ommx.v1.Constraint.description)
}
inline std::string* Constraint::mutable_description() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:ommx.v1.Constraint.description)
  return _s;
}
inline const std::string& Constraint::_internal_description() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.description_.Get();
}
inline void Constraint::_internal_set_description(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.description_.Set(value, GetArena());
}
inline std::string* Constraint::_internal_mutable_description() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.description_.Mutable( GetArena());
}
inline std::string* Constraint::release_description() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ommx.v1.Constraint.description)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.description_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Constraint::set_allocated_description(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.description_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.description_.IsDefault()) {
          _impl_.description_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ommx.v1.Constraint.description)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// EvaluatedConstraint

// uint64 id = 1;
inline void EvaluatedConstraint::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = ::uint64_t{0u};
}
inline ::uint64_t EvaluatedConstraint::id() const {
  // @@protoc_insertion_point(field_get:ommx.v1.EvaluatedConstraint.id)
  return _internal_id();
}
inline void EvaluatedConstraint::set_id(::uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:ommx.v1.EvaluatedConstraint.id)
}
inline ::uint64_t EvaluatedConstraint::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_;
}
inline void EvaluatedConstraint::_internal_set_id(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = value;
}

// .ommx.v1.Equality equality = 2;
inline void EvaluatedConstraint::clear_equality() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.equality_ = 0;
}
inline ::ommx::v1::Equality EvaluatedConstraint::equality() const {
  // @@protoc_insertion_point(field_get:ommx.v1.EvaluatedConstraint.equality)
  return _internal_equality();
}
inline void EvaluatedConstraint::set_equality(::ommx::v1::Equality value) {
  _internal_set_equality(value);
  // @@protoc_insertion_point(field_set:ommx.v1.EvaluatedConstraint.equality)
}
inline ::ommx::v1::Equality EvaluatedConstraint::_internal_equality() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::ommx::v1::Equality>(_impl_.equality_);
}
inline void EvaluatedConstraint::_internal_set_equality(::ommx::v1::Equality value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.equality_ = value;
}

// double evaluated_value = 3;
inline void EvaluatedConstraint::clear_evaluated_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.evaluated_value_ = 0;
}
inline double EvaluatedConstraint::evaluated_value() const {
  // @@protoc_insertion_point(field_get:ommx.v1.EvaluatedConstraint.evaluated_value)
  return _internal_evaluated_value();
}
inline void EvaluatedConstraint::set_evaluated_value(double value) {
  _internal_set_evaluated_value(value);
  // @@protoc_insertion_point(field_set:ommx.v1.EvaluatedConstraint.evaluated_value)
}
inline double EvaluatedConstraint::_internal_evaluated_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.evaluated_value_;
}
inline void EvaluatedConstraint::_internal_set_evaluated_value(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.evaluated_value_ = value;
}

// repeated uint64 used_decision_variable_ids = 4;
inline int EvaluatedConstraint::_internal_used_decision_variable_ids_size() const {
  return _internal_used_decision_variable_ids().size();
}
inline int EvaluatedConstraint::used_decision_variable_ids_size() const {
  return _internal_used_decision_variable_ids_size();
}
inline void EvaluatedConstraint::clear_used_decision_variable_ids() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.used_decision_variable_ids_.Clear();
}
inline ::uint64_t EvaluatedConstraint::used_decision_variable_ids(int index) const {
  // @@protoc_insertion_point(field_get:ommx.v1.EvaluatedConstraint.used_decision_variable_ids)
  return _internal_used_decision_variable_ids().Get(index);
}
inline void EvaluatedConstraint::set_used_decision_variable_ids(int index, ::uint64_t value) {
  _internal_mutable_used_decision_variable_ids()->Set(index, value);
  // @@protoc_insertion_point(field_set:ommx.v1.EvaluatedConstraint.used_decision_variable_ids)
}
inline void EvaluatedConstraint::add_used_decision_variable_ids(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_used_decision_variable_ids()->Add(value);
  // @@protoc_insertion_point(field_add:ommx.v1.EvaluatedConstraint.used_decision_variable_ids)
}
inline const ::google::protobuf::RepeatedField<::uint64_t>& EvaluatedConstraint::used_decision_variable_ids() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:ommx.v1.EvaluatedConstraint.used_decision_variable_ids)
  return _internal_used_decision_variable_ids();
}
inline ::google::protobuf::RepeatedField<::uint64_t>* EvaluatedConstraint::mutable_used_decision_variable_ids()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:ommx.v1.EvaluatedConstraint.used_decision_variable_ids)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_used_decision_variable_ids();
}
inline const ::google::protobuf::RepeatedField<::uint64_t>&
EvaluatedConstraint::_internal_used_decision_variable_ids() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.used_decision_variable_ids_;
}
inline ::google::protobuf::RepeatedField<::uint64_t>* EvaluatedConstraint::_internal_mutable_used_decision_variable_ids() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.used_decision_variable_ids_;
}

// repeated int64 subscripts = 9;
inline int EvaluatedConstraint::_internal_subscripts_size() const {
  return _internal_subscripts().size();
}
inline int EvaluatedConstraint::subscripts_size() const {
  return _internal_subscripts_size();
}
inline void EvaluatedConstraint::clear_subscripts() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.subscripts_.Clear();
}
inline ::int64_t EvaluatedConstraint::subscripts(int index) const {
  // @@protoc_insertion_point(field_get:ommx.v1.EvaluatedConstraint.subscripts)
  return _internal_subscripts().Get(index);
}
inline void EvaluatedConstraint::set_subscripts(int index, ::int64_t value) {
  _internal_mutable_subscripts()->Set(index, value);
  // @@protoc_insertion_point(field_set:ommx.v1.EvaluatedConstraint.subscripts)
}
inline void EvaluatedConstraint::add_subscripts(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_subscripts()->Add(value);
  // @@protoc_insertion_point(field_add:ommx.v1.EvaluatedConstraint.subscripts)
}
inline const ::google::protobuf::RepeatedField<::int64_t>& EvaluatedConstraint::subscripts() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:ommx.v1.EvaluatedConstraint.subscripts)
  return _internal_subscripts();
}
inline ::google::protobuf::RepeatedField<::int64_t>* EvaluatedConstraint::mutable_subscripts()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:ommx.v1.EvaluatedConstraint.subscripts)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_subscripts();
}
inline const ::google::protobuf::RepeatedField<::int64_t>&
EvaluatedConstraint::_internal_subscripts() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.subscripts_;
}
inline ::google::protobuf::RepeatedField<::int64_t>* EvaluatedConstraint::_internal_mutable_subscripts() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.subscripts_;
}

// map<string, string> parameters = 5;
inline int EvaluatedConstraint::_internal_parameters_size() const {
  return _internal_parameters().size();
}
inline int EvaluatedConstraint::parameters_size() const {
  return _internal_parameters_size();
}
inline void EvaluatedConstraint::clear_parameters() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.parameters_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& EvaluatedConstraint::_internal_parameters() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.parameters_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& EvaluatedConstraint::parameters() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:ommx.v1.EvaluatedConstraint.parameters)
  return _internal_parameters();
}
inline ::google::protobuf::Map<std::string, std::string>* EvaluatedConstraint::_internal_mutable_parameters() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.parameters_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* EvaluatedConstraint::mutable_parameters() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:ommx.v1.EvaluatedConstraint.parameters)
  return _internal_mutable_parameters();
}

// optional string name = 6;
inline bool EvaluatedConstraint::has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void EvaluatedConstraint::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& EvaluatedConstraint::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ommx.v1.EvaluatedConstraint.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EvaluatedConstraint::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ommx.v1.EvaluatedConstraint.name)
}
inline std::string* EvaluatedConstraint::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:ommx.v1.EvaluatedConstraint.name)
  return _s;
}
inline const std::string& EvaluatedConstraint::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void EvaluatedConstraint::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* EvaluatedConstraint::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* EvaluatedConstraint::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ommx.v1.EvaluatedConstraint.name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void EvaluatedConstraint::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ommx.v1.EvaluatedConstraint.name)
}

// optional string description = 7;
inline bool EvaluatedConstraint::has_description() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void EvaluatedConstraint::clear_description() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.description_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& EvaluatedConstraint::description() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ommx.v1.EvaluatedConstraint.description)
  return _internal_description();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EvaluatedConstraint::set_description(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.description_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ommx.v1.EvaluatedConstraint.description)
}
inline std::string* EvaluatedConstraint::mutable_description() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:ommx.v1.EvaluatedConstraint.description)
  return _s;
}
inline const std::string& EvaluatedConstraint::_internal_description() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.description_.Get();
}
inline void EvaluatedConstraint::_internal_set_description(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.description_.Set(value, GetArena());
}
inline std::string* EvaluatedConstraint::_internal_mutable_description() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.description_.Mutable( GetArena());
}
inline std::string* EvaluatedConstraint::release_description() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ommx.v1.EvaluatedConstraint.description)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.description_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void EvaluatedConstraint::set_allocated_description(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.description_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.description_.IsDefault()) {
          _impl_.description_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ommx.v1.EvaluatedConstraint.description)
}

// optional double dual_variable = 8;
inline bool EvaluatedConstraint::has_dual_variable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void EvaluatedConstraint::clear_dual_variable() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dual_variable_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double EvaluatedConstraint::dual_variable() const {
  // @@protoc_insertion_point(field_get:ommx.v1.EvaluatedConstraint.dual_variable)
  return _internal_dual_variable();
}
inline void EvaluatedConstraint::set_dual_variable(double value) {
  _internal_set_dual_variable(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:ommx.v1.EvaluatedConstraint.dual_variable)
}
inline double EvaluatedConstraint::_internal_dual_variable() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.dual_variable_;
}
inline void EvaluatedConstraint::_internal_set_dual_variable(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dual_variable_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace ommx


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::ommx::v1::Equality> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::ommx::v1::Equality>() {
  return ::ommx::v1::Equality_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_ommx_2fv1_2fconstraint_2eproto_2epb_2eh
