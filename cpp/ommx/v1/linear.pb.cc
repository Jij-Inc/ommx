// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ommx/v1/linear.proto
// Protobuf C++ Version: 5.26.1

#include "ommx/v1/linear.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace ommx {
namespace v1 {

inline constexpr Linear_Term::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : id_{::uint64_t{0u}},
        coefficient_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Linear_Term::Linear_Term(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct Linear_TermDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Linear_TermDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Linear_TermDefaultTypeInternal() {}
  union {
    Linear_Term _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Linear_TermDefaultTypeInternal _Linear_Term_default_instance_;

inline constexpr Linear::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : terms_{},
        constant_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Linear::Linear(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct LinearDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LinearDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LinearDefaultTypeInternal() {}
  union {
    Linear _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LinearDefaultTypeInternal _Linear_default_instance_;
}  // namespace v1
}  // namespace ommx
static ::_pb::Metadata file_level_metadata_ommx_2fv1_2flinear_2eproto[2];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_ommx_2fv1_2flinear_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_ommx_2fv1_2flinear_2eproto = nullptr;
const ::uint32_t
    TableStruct_ommx_2fv1_2flinear_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::ommx::v1::Linear_Term, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::ommx::v1::Linear_Term, _impl_.id_),
        PROTOBUF_FIELD_OFFSET(::ommx::v1::Linear_Term, _impl_.coefficient_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::ommx::v1::Linear, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::ommx::v1::Linear, _impl_.terms_),
        PROTOBUF_FIELD_OFFSET(::ommx::v1::Linear, _impl_.constant_),
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::ommx::v1::Linear_Term)},
        {10, -1, -1, sizeof(::ommx::v1::Linear)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::ommx::v1::_Linear_Term_default_instance_._instance,
    &::ommx::v1::_Linear_default_instance_._instance,
};
const char descriptor_table_protodef_ommx_2fv1_2flinear_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\024ommx/v1/linear.proto\022\007ommx.v1\"\212\001\n\006Line"
    "ar\022*\n\005terms\030\001 \003(\0132\024.ommx.v1.Linear.TermR"
    "\005terms\022\032\n\010constant\030\002 \001(\001R\010constant\0328\n\004Te"
    "rm\022\016\n\002id\030\001 \001(\004R\002id\022 \n\013coefficient\030\002 \001(\001R"
    "\013coefficientBW\n\013com.ommx.v1B\013LinearProto"
    "P\001\242\002\003OXX\252\002\007Ommx.V1\312\002\007Ommx\\V1\342\002\023Ommx\\V1\\G"
    "PBMetadata\352\002\010Ommx::V1b\006proto3"
};
static ::absl::once_flag descriptor_table_ommx_2fv1_2flinear_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ommx_2fv1_2flinear_2eproto = {
    false,
    false,
    269,
    descriptor_table_protodef_ommx_2fv1_2flinear_2eproto,
    "ommx/v1/linear.proto",
    &descriptor_table_ommx_2fv1_2flinear_2eproto_once,
    nullptr,
    0,
    2,
    schemas,
    file_default_instances,
    TableStruct_ommx_2fv1_2flinear_2eproto::offsets,
    file_level_metadata_ommx_2fv1_2flinear_2eproto,
    file_level_enum_descriptors_ommx_2fv1_2flinear_2eproto,
    file_level_service_descriptors_ommx_2fv1_2flinear_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ommx_2fv1_2flinear_2eproto_getter() {
  return &descriptor_table_ommx_2fv1_2flinear_2eproto;
}
namespace ommx {
namespace v1 {
// ===================================================================

class Linear_Term::_Internal {
 public:
};

Linear_Term::Linear_Term(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ommx.v1.Linear.Term)
}
Linear_Term::Linear_Term(
    ::google::protobuf::Arena* arena, const Linear_Term& from)
    : Linear_Term(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE Linear_Term::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Linear_Term::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, id_),
           0,
           offsetof(Impl_, coefficient_) -
               offsetof(Impl_, id_) +
               sizeof(Impl_::coefficient_));
}
Linear_Term::~Linear_Term() {
  // @@protoc_insertion_point(destructor:ommx.v1.Linear.Term)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Linear_Term::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
Linear_Term::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(Linear_Term, _impl_._cached_size_),
              false,
          },
          &Linear_Term::MergeImpl,
          &Linear_Term::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void Linear_Term::Clear() {
// @@protoc_insertion_point(message_clear_start:ommx.v1.Linear.Term)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.coefficient_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.coefficient_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Linear_Term::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> Linear_Term::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Linear_Term_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::ommx::v1::Linear_Term>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // double coefficient = 2 [json_name = "coefficient"];
    {::_pbi::TcParser::FastF64S1,
     {17, 63, 0, PROTOBUF_FIELD_OFFSET(Linear_Term, _impl_.coefficient_)}},
    // uint64 id = 1 [json_name = "id"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(Linear_Term, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Linear_Term, _impl_.id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint64 id = 1 [json_name = "id"];
    {PROTOBUF_FIELD_OFFSET(Linear_Term, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
    // double coefficient = 2 [json_name = "coefficient"];
    {PROTOBUF_FIELD_OFFSET(Linear_Term, _impl_.coefficient_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* Linear_Term::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ommx.v1.Linear.Term)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint64 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_id(), target);
  }

  // double coefficient = 2 [json_name = "coefficient"];
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_coefficient = this->_internal_coefficient();
  ::uint64_t raw_coefficient;
  memcpy(&raw_coefficient, &tmp_coefficient, sizeof(tmp_coefficient));
  if (raw_coefficient != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        2, this->_internal_coefficient(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ommx.v1.Linear.Term)
  return target;
}

::size_t Linear_Term::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ommx.v1.Linear.Term)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_id());
  }

  // double coefficient = 2 [json_name = "coefficient"];
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_coefficient = this->_internal_coefficient();
  ::uint64_t raw_coefficient;
  memcpy(&raw_coefficient, &tmp_coefficient, sizeof(tmp_coefficient));
  if (raw_coefficient != 0) {
    total_size += 9;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void Linear_Term::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Linear_Term*>(&to_msg);
  auto& from = static_cast<const Linear_Term&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ommx.v1.Linear.Term)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_impl_.id_ = from._impl_.id_;
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_coefficient = from._internal_coefficient();
  ::uint64_t raw_coefficient;
  memcpy(&raw_coefficient, &tmp_coefficient, sizeof(tmp_coefficient));
  if (raw_coefficient != 0) {
    _this->_impl_.coefficient_ = from._impl_.coefficient_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Linear_Term::CopyFrom(const Linear_Term& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ommx.v1.Linear.Term)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Linear_Term::IsInitialized() const {
  return true;
}

void Linear_Term::InternalSwap(Linear_Term* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Linear_Term, _impl_.coefficient_)
      + sizeof(Linear_Term::_impl_.coefficient_)
      - PROTOBUF_FIELD_OFFSET(Linear_Term, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::google::protobuf::Metadata Linear_Term::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_ommx_2fv1_2flinear_2eproto_getter,
                                   &descriptor_table_ommx_2fv1_2flinear_2eproto_once,
                                   file_level_metadata_ommx_2fv1_2flinear_2eproto[0]);
}
// ===================================================================

class Linear::_Internal {
 public:
};

Linear::Linear(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ommx.v1.Linear)
}
inline PROTOBUF_NDEBUG_INLINE Linear::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : terms_{visibility, arena, from.terms_},
        _cached_size_{0} {}

Linear::Linear(
    ::google::protobuf::Arena* arena,
    const Linear& from)
    : ::google::protobuf::Message(arena) {
  Linear* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.constant_ = from._impl_.constant_;

  // @@protoc_insertion_point(copy_constructor:ommx.v1.Linear)
}
inline PROTOBUF_NDEBUG_INLINE Linear::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : terms_{visibility, arena},
        _cached_size_{0} {}

inline void Linear::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.constant_ = {};
}
Linear::~Linear() {
  // @@protoc_insertion_point(destructor:ommx.v1.Linear)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Linear::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
Linear::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(Linear, _impl_._cached_size_),
              false,
          },
          &Linear::MergeImpl,
          &Linear::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void Linear::Clear() {
// @@protoc_insertion_point(message_clear_start:ommx.v1.Linear)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.terms_.Clear();
  _impl_.constant_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Linear::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> Linear::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Linear_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::ommx::v1::Linear>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // double constant = 2 [json_name = "constant"];
    {::_pbi::TcParser::FastF64S1,
     {17, 63, 0, PROTOBUF_FIELD_OFFSET(Linear, _impl_.constant_)}},
    // repeated .ommx.v1.Linear.Term terms = 1 [json_name = "terms"];
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Linear, _impl_.terms_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .ommx.v1.Linear.Term terms = 1 [json_name = "terms"];
    {PROTOBUF_FIELD_OFFSET(Linear, _impl_.terms_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // double constant = 2 [json_name = "constant"];
    {PROTOBUF_FIELD_OFFSET(Linear, _impl_.constant_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }}, {{
    {::_pbi::TcParser::GetTable<::ommx::v1::Linear_Term>()},
  }}, {{
  }},
};

::uint8_t* Linear::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ommx.v1.Linear)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .ommx.v1.Linear.Term terms = 1 [json_name = "terms"];
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this->_internal_terms_size());
       i < n; i++) {
    const auto& repfield = this->_internal_terms().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            1, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // double constant = 2 [json_name = "constant"];
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_constant = this->_internal_constant();
  ::uint64_t raw_constant;
  memcpy(&raw_constant, &tmp_constant, sizeof(tmp_constant));
  if (raw_constant != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        2, this->_internal_constant(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ommx.v1.Linear)
  return target;
}

::size_t Linear::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ommx.v1.Linear)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ommx.v1.Linear.Term terms = 1 [json_name = "terms"];
  total_size += 1UL * this->_internal_terms_size();
  for (const auto& msg : this->_internal_terms()) {
    total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // double constant = 2 [json_name = "constant"];
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_constant = this->_internal_constant();
  ::uint64_t raw_constant;
  memcpy(&raw_constant, &tmp_constant, sizeof(tmp_constant));
  if (raw_constant != 0) {
    total_size += 9;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void Linear::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Linear*>(&to_msg);
  auto& from = static_cast<const Linear&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ommx.v1.Linear)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_terms()->MergeFrom(
      from._internal_terms());
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_constant = from._internal_constant();
  ::uint64_t raw_constant;
  memcpy(&raw_constant, &tmp_constant, sizeof(tmp_constant));
  if (raw_constant != 0) {
    _this->_impl_.constant_ = from._impl_.constant_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Linear::CopyFrom(const Linear& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ommx.v1.Linear)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Linear::IsInitialized() const {
  return true;
}

void Linear::InternalSwap(Linear* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.terms_.InternalSwap(&other->_impl_.terms_);
        swap(_impl_.constant_, other->_impl_.constant_);
}

::google::protobuf::Metadata Linear::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_ommx_2fv1_2flinear_2eproto_getter,
                                   &descriptor_table_ommx_2fv1_2flinear_2eproto_once,
                                   file_level_metadata_ommx_2fv1_2flinear_2eproto[1]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace ommx
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::std::false_type _static_init_ PROTOBUF_UNUSED =
    (::_pbi::AddDescriptors(&descriptor_table_ommx_2fv1_2flinear_2eproto),
     ::std::false_type{});
#include "google/protobuf/port_undef.inc"
